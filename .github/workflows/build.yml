name: 'Anoncreds'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish-binaries:
        description: 'Publish Binaries to Release (will create a release if no release exits for branch or tag)'
        required: true
        default: false
        type: boolean
      publish-wrappers:
        description: 'Publish Wrappers to Registries'
        required: true
        default: false
        type: boolean

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2

      - name: Cargo check
        run: cargo check

      - name: Cargo fmt
        run: cargo fmt --all -- --check

  

  check:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2

      - name: Test Linux and macOS
        if: "runner.os != 'Windows'"
        run: cargo test --package anoncreds --features vendored

      - name: Test Windows
        if: "runner.os == 'Windows'"
        env:
          OPENSSL_STATIC: 1
        run: cargo test --package anoncreds --features vendored

  build-release:
    name: Build Library

    env:
      # This is required for fetching the openssl dependency from git more consistently
      CARGO_NET_GIT_FETCH_WITH_CLI: true

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: linux-x86_64
            target: x86_64-unknown-linux-gnu
            lib: libanoncreds.so
          - os: macos-latest
            arch: macos-x86_64
            lib: libanoncreds.dylib
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: darwin-aarch64
            target: aarch64-apple-darwin
            lib: libanoncreds.dylib
          - os: windows-latest
            arch: windows-x86_64
            target: x86_64-pc-windows-msvc
            lib: anoncreds.dll

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2

      - name: Build library for Windows
        if: "runner.os == 'Windows'"
        env:
          OPENSSL_STATIC: 1
        run: cargo build --release --package anoncreds --target ${{matrix.target}} --features vendored

      - name: Build library for macOS and Linux
        if: "runner.os != 'Windows'"
        run: cargo build --release --package anoncreds --target ${{matrix.target}} --features vendored

      - name: Upload library artifacts
        uses: actions/upload-artifact@v3
        with:
          name: library-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${{ matrix.lib }}

      - name: Create library artifacts directory
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
        run: |
          mkdir release-artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.lib }} release-artifacts/

      - uses: a7ul/tar-action@v1.1.2
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
        with:
          command: c
          cwd: release-artifacts
          files: .
          outPath: 'library-${{ matrix.arch }}.tar.gz'

      - name: Add library artifacts to release
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
        uses: svenstaro/upload-release-action@v2
        with:
          file: library-${{ matrix.arch }}.tar.gz
          asset_name: 'library-${{ matrix.arch }}.tar.gz'

  build-javascript:
    name: Build and Test JavaScript wrapper
    needs: [build-release]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: wrappers/javascript

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.JS 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Fetch library artifacts
        uses: actions/download-artifact@v3
        with:
          name: library-linux-x86_64

      - name: Install dependencies
        run: yarn install

      - name: Build JavaScript Wrapper
        run: yarn build

      - name: Lint JavaScript Wrapper
        run: yarn lint

      - name: Format Check JavaScript Wrapper
        run: yarn check-format

      - name: Type Check JavaScript Wrapper
        run: yarn check-types

      - name: Test JavaScript Wrapper
        env:
          # binary is downloaded to root of repository
          LIB_ANONCREDS_PATH: ../../
        run: yarn test

            # build-py:
            #   name: Build Python
            #   needs: [build-release]

            #   strategy:
            #     matrix:
            #       include:
            #         - os: ubuntu-latest
            #           library: library-linux-x86_64
            #           plat-name: manylinux2014_x86_64
            #         - os: windows-latest
            #           library: library-windows-x86_64
            #           plat-name: win_amd64
            #         - os: macos-latest
            #           library: library-macos-x86_64
            #           plat-name: win_amd64

            #   runs-on: ${{ matrix.os }}

            #   steps:
            #     - name: Checkout
            #       uses: actions/checkout@v2

            #     - name: Set up Python 3.8
            #       uses: actions/setup-python@v2
            #       with:
            #         python-version: 3.8

            #     - name: Install dependencies
            #       run: |
            #         python -m pip install --upgrade pip
            #         pip install setuptools wheel twine auditwheel
            #     - name: Fetch library artifacts
            #       uses: actions/download-artifact@v2
            #       with:
            #         name: ${{matrix.library}}
            #         path: wrappers/python/indy_credx/

            #     - name: Build python package
            #       run: |
            #         python setup.py bdist_wheel --python-tag=py3 --plat-name=${{ matrix.plat-name }}
            #       working-directory: wrappers/python

            #     - name: Test python package
            #       shell: sh
            #       run: |
            #         cd wrappers/python
            #         pip install --upgrade pip
            #         pip install dist/*
            #         python -m demo.test
            #     - if: "runner.os == 'Linux'"
            #       name: Auditwheel
            #       run: auditwheel show wrappers/python/dist/*

            #     - name: Upload python package
            #       uses: actions/upload-artifact@v2
            #       with:
            #         name: python-${{ runner.os }}
            #         path: wrappers/python/dist/*

            #     - if: |
            #         (github.event_name == 'release' ||
            #           (github.event_name == 'workflow_dispatch' &&
            #            github.event.inputs.publish == 'true'))
            #       name: Publish python package
            #       env:
            #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
            #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
            #       run: |
            #         twine upload --skip-existing wrappers/python/dist/*

  build-android-libraries:
    name: Build Android Libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          [
            aarch64-linux-android,
            armv7-linux-androideabi,
            i686-linux-android,
            x86_64-linux-android,
          ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{matrix.architecture}} --package=anoncreds --features=vendored
      - uses: actions/upload-artifact@v2
        name: Save library
        with:
          name: ${{matrix.architecture}}
          path: target/${{matrix.architecture}}/release/libanoncreds.so

  create-android-library:
    name: Create android libraries
    runs-on: ubuntu-latest
    needs: build-android-libraries
    if: |
      (github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.publish == 'true'))
    steps:
      - name: Fetch libraries
        uses: actions/download-artifact@v3
      - run: |
          sudo mkdir ./libs
          sudo mv aarch64-linux-android   ./libs/arm64-v8a
          sudo mv armv7-linux-androideabi ./libs/armeabi-v7a
          sudo mv i686-linux-android      ./libs/x86
          sudo mv x86_64-linux-android    ./libs/x86_64
      - name: Save Android library
        uses: actions/upload-artifact@v2
        with:
          name: android-libs
          path: ./libs
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            aarch64-linux-android
            armv7-linux-androideabi
            i686-linux-android
            x86_64-linux-android
          failOnError: false

  build-ios-libraries:
    name: Build ios Libraries
    runs-on: macos-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    strategy:
      matrix:
        architecture:
          [aarch64-apple-ios, aarch64-apple-ios-sim, x86_64-apple-ios]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{matrix.architecture}} --package=anoncreds --features=vendored
      - uses: actions/upload-artifact@v2
        name: Save library
        with:
          name: ${{matrix.architecture}}
          path: target/${{matrix.architecture}}/release/libanoncreds.dylib

  create-ios-xcframework:
    name: Create ios xcframework
    runs-on: macos-latest
    needs: build-ios-libraries
    if: |
      (github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.publish == 'true'))
    steps:
      - uses: actions/checkout@v2
      - name: Fetch static libraries
        uses: actions/download-artifact@v3
      - run: >
          lipo -create aarch64-apple-ios-sim/libanoncreds.dylib \
                       x86_64-apple-ios/libanoncreds.dylib \
               -output libanoncreds.dylib
      - run: >
          xcodebuild -create-xcframework \
            -library aarch64-apple-ios/libanoncreds.dylib -headers include/libanoncreds.h \
            -library libanoncreds.dylib                   -headers include/libanoncreds.h \
            -output anoncreds.xcframework
      - name: Save xcframework
        uses: actions/upload-artifact@v3
        with:
          name: anoncreds.xcframework
          path: anoncreds.xcframework
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            aarch64-apple-ios
            aarch64-apple-ios-sim
            x86_64-apple-ios
          failOnError: false
