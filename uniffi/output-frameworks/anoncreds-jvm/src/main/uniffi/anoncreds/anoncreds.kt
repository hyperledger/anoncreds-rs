// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.anoncreds;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_anoncreds_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_anoncreds_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_anoncreds"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "anoncreds")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_anoncreds_fn_free_linksecret(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_linksecret_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_constructor_linksecret_new_from_value(`valueString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_linksecret_get_big_number(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_linksecret_get_value(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_nonce(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_nonce_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_constructor_nonce_new_from_value(`valueString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_nonce_get_value(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_credentialdefinition(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_credentialdefinition_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialdefinition_get_schema_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialdefinition_get_signature_type(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialdefinition_get_tag(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialdefinition_get_issuer_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialdefinition_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_credentialoffer(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_credentialoffer_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialoffer_get_schema_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialoffer_get_cred_def_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialoffer_get_key_correctness_proof(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialoffer_get_nonce(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialoffer_get_method_name(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialoffer_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_credentialrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_credentialrequest_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialrequest_get_blinded_credential_secrets_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialrequest_get_blinded_credential_secrets_correctness_proof_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credentialrequest_get_nonce(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialrequest_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_credentialkeycorrectnessproof(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_credentialkeycorrectnessproof_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialkeycorrectnessproof_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_revocationregistrydefinition(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_revocationregistrydefinition_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_revocationregistrydefinition_get_issuer_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_revocationregistrydefinition_get_tag(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_revocationregistrydefinition_get_cred_def_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_revocationregistrydefinition_get_value(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_revocationregistrydefinition_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_revocationregistrydefinitionprivate(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_revocationregistrydefinitionprivate_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_revocationregistrydefinitionprivate_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_credential(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_credential_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credential_get_schema_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_cred_def_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_rev_reg_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_values(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_signature_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_signature_correctness_proof_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_rev_reg_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_witness_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_credential_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_revocationstatuslist(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_revocationstatuslist_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_revocationstatuslist_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_revocationregistrydefinitionvalue(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_revocationregistrydefinitionvalue_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_max_cred_num(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_tails_hash(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_tails_location(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_revocationregistrydefinitionvaluepublickeys(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_revocationregistrydefinitionvaluepublickeys_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_revocationregistrydefinitionvaluepublickeys_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_credentialdefinitionprivate(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_credentialdefinitionprivate_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_credentialdefinitionprivate_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_issuer(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_issuer_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_issuer_create_schema(`ptr`: Pointer,`schemaName`: RustBuffer.ByValue,`schemaVersion`: RustBuffer.ByValue,`issuerId`: RustBuffer.ByValue,`attrNames`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_issuer_create_credential_definition(`ptr`: Pointer,`schemaId`: RustBuffer.ByValue,`schema`: RustBuffer.ByValue,`issuerId`: RustBuffer.ByValue,`tag`: RustBuffer.ByValue,`signatureType`: RustBuffer.ByValue,`config`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_issuer_create_revocation_registry_def(`ptr`: Pointer,`credDef`: Pointer,`credDefId`: RustBuffer.ByValue,`issuerId`: RustBuffer.ByValue,`tag`: RustBuffer.ByValue,`revRegType`: RustBuffer.ByValue,`maxCredNum`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_issuer_create_revocation_status_list(`ptr`: Pointer,`revRegDefId`: RustBuffer.ByValue,`revRegDef`: Pointer,`issuerId`: RustBuffer.ByValue,`timestamp`: RustBuffer.ByValue,`issuanceByDefault`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_issuer_update_revocation_status_list_timestamp_only(`ptr`: Pointer,`timestamp`: Long,`currentList`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_issuer_update_revocation_status_list(`ptr`: Pointer,`timestamp`: RustBuffer.ByValue,`issued`: RustBuffer.ByValue,`revoked`: RustBuffer.ByValue,`revRegDef`: Pointer,`currentList`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_issuer_create_credential_offer(`ptr`: Pointer,`schemaId`: RustBuffer.ByValue,`credDefId`: RustBuffer.ByValue,`correctnessProof`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_issuer_create_credential(`ptr`: Pointer,`credDef`: Pointer,`credDefPrivate`: Pointer,`credOffer`: Pointer,`credRequest`: Pointer,`credValues`: RustBuffer.ByValue,`revRegId`: RustBuffer.ByValue,`revStatusList`: RustBuffer.ByValue,`revocationConfig`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_free_prover(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_prover_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_prover_create_credential_request(`ptr`: Pointer,`entropy`: RustBuffer.ByValue,`proverDid`: RustBuffer.ByValue,`credDef`: Pointer,`linkSecret`: Pointer,`linkSecretId`: RustBuffer.ByValue,`credentialOffer`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_method_prover_process_credential(`ptr`: Pointer,`credential`: Pointer,`credRequestMetadata`: RustBuffer.ByValue,`linkSecret`: Pointer,`credDef`: Pointer,`revRegDef`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_method_prover_create_presentation(`ptr`: Pointer,`presentationRequest`: Pointer,`credentials`: RustBuffer.ByValue,`selfAttested`: RustBuffer.ByValue,`linkSecret`: Pointer,`schemas`: RustBuffer.ByValue,`credentialDefinitions`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_prover_create_link_secret(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_free_presentation(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_presentation_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_presentation_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_presentationrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_presentationrequest_new(`jsonString`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_presentationrequest_get_json(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_anoncreds_fn_free_verifier(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_anoncreds_fn_constructor_verifier_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_anoncreds_fn_method_verifier_verify_presentation(`ptr`: Pointer,`presentation`: Pointer,`presentationRequest`: Pointer,`schemas`: RustBuffer.ByValue,`credentialDefinitions`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_anoncreds_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_anoncreds_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_anoncreds_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_anoncreds_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi__checksum_method_linksecret_get_big_number(
    ): Short
    fun uniffi__checksum_method_linksecret_get_value(
    ): Short
    fun uniffi__checksum_method_nonce_get_value(
    ): Short
    fun uniffi__checksum_method_credentialdefinition_get_schema_id(
    ): Short
    fun uniffi__checksum_method_credentialdefinition_get_signature_type(
    ): Short
    fun uniffi__checksum_method_credentialdefinition_get_tag(
    ): Short
    fun uniffi__checksum_method_credentialdefinition_get_issuer_id(
    ): Short
    fun uniffi__checksum_method_credentialdefinition_get_json(
    ): Short
    fun uniffi__checksum_method_credentialoffer_get_schema_id(
    ): Short
    fun uniffi__checksum_method_credentialoffer_get_cred_def_id(
    ): Short
    fun uniffi__checksum_method_credentialoffer_get_key_correctness_proof(
    ): Short
    fun uniffi__checksum_method_credentialoffer_get_nonce(
    ): Short
    fun uniffi__checksum_method_credentialoffer_get_method_name(
    ): Short
    fun uniffi__checksum_method_credentialoffer_get_json(
    ): Short
    fun uniffi__checksum_method_credentialrequest_get_blinded_credential_secrets_json(
    ): Short
    fun uniffi__checksum_method_credentialrequest_get_blinded_credential_secrets_correctness_proof_json(
    ): Short
    fun uniffi__checksum_method_credentialrequest_get_nonce(
    ): Short
    fun uniffi__checksum_method_credentialrequest_get_json(
    ): Short
    fun uniffi__checksum_method_credentialkeycorrectnessproof_get_json(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinition_get_issuer_id(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinition_get_tag(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinition_get_cred_def_id(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinition_get_value(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinition_get_json(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinitionprivate_get_json(
    ): Short
    fun uniffi__checksum_method_credential_get_schema_id(
    ): Short
    fun uniffi__checksum_method_credential_get_cred_def_id(
    ): Short
    fun uniffi__checksum_method_credential_get_rev_reg_id(
    ): Short
    fun uniffi__checksum_method_credential_get_values(
    ): Short
    fun uniffi__checksum_method_credential_get_signature_json(
    ): Short
    fun uniffi__checksum_method_credential_get_signature_correctness_proof_json(
    ): Short
    fun uniffi__checksum_method_credential_get_rev_reg_json(
    ): Short
    fun uniffi__checksum_method_credential_get_witness_json(
    ): Short
    fun uniffi__checksum_method_credential_get_json(
    ): Short
    fun uniffi__checksum_method_revocationstatuslist_get_json(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinitionvalue_get_max_cred_num(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinitionvalue_get_tails_hash(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinitionvalue_get_tails_location(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinitionvalue_get_json(
    ): Short
    fun uniffi__checksum_method_revocationregistrydefinitionvaluepublickeys_get_json(
    ): Short
    fun uniffi__checksum_method_credentialdefinitionprivate_get_json(
    ): Short
    fun uniffi__checksum_method_issuer_create_schema(
    ): Short
    fun uniffi__checksum_method_issuer_create_credential_definition(
    ): Short
    fun uniffi__checksum_method_issuer_create_revocation_registry_def(
    ): Short
    fun uniffi__checksum_method_issuer_create_revocation_status_list(
    ): Short
    fun uniffi__checksum_method_issuer_update_revocation_status_list_timestamp_only(
    ): Short
    fun uniffi__checksum_method_issuer_update_revocation_status_list(
    ): Short
    fun uniffi__checksum_method_issuer_create_credential_offer(
    ): Short
    fun uniffi__checksum_method_issuer_create_credential(
    ): Short
    fun uniffi__checksum_method_prover_create_credential_request(
    ): Short
    fun uniffi__checksum_method_prover_process_credential(
    ): Short
    fun uniffi__checksum_method_prover_create_presentation(
    ): Short
    fun uniffi__checksum_method_prover_create_link_secret(
    ): Short
    fun uniffi__checksum_method_presentation_get_json(
    ): Short
    fun uniffi__checksum_method_presentationrequest_get_json(
    ): Short
    fun uniffi__checksum_method_verifier_verify_presentation(
    ): Short
    fun uniffi__checksum_constructor_linksecret_new(
    ): Short
    fun uniffi__checksum_constructor_linksecret_new_from_value(
    ): Short
    fun uniffi__checksum_constructor_nonce_new(
    ): Short
    fun uniffi__checksum_constructor_nonce_new_from_value(
    ): Short
    fun uniffi__checksum_constructor_credentialdefinition_new(
    ): Short
    fun uniffi__checksum_constructor_credentialoffer_new(
    ): Short
    fun uniffi__checksum_constructor_credentialrequest_new(
    ): Short
    fun uniffi__checksum_constructor_credentialkeycorrectnessproof_new(
    ): Short
    fun uniffi__checksum_constructor_revocationregistrydefinition_new(
    ): Short
    fun uniffi__checksum_constructor_revocationregistrydefinitionprivate_new(
    ): Short
    fun uniffi__checksum_constructor_credential_new(
    ): Short
    fun uniffi__checksum_constructor_revocationstatuslist_new(
    ): Short
    fun uniffi__checksum_constructor_revocationregistrydefinitionvalue_new(
    ): Short
    fun uniffi__checksum_constructor_revocationregistrydefinitionvaluepublickeys_new(
    ): Short
    fun uniffi__checksum_constructor_credentialdefinitionprivate_new(
    ): Short
    fun uniffi__checksum_constructor_issuer_new(
    ): Short
    fun uniffi__checksum_constructor_prover_new(
    ): Short
    fun uniffi__checksum_constructor_presentation_new(
    ): Short
    fun uniffi__checksum_constructor_presentationrequest_new(
    ): Short
    fun uniffi__checksum_constructor_verifier_new(
    ): Short
    fun ffi_anoncreds_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_anoncreds_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi__checksum_method_linksecret_get_big_number() != 17566.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_linksecret_get_value() != 31184.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_nonce_get_value() != 55559.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialdefinition_get_schema_id() != 2873.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialdefinition_get_signature_type() != 33283.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialdefinition_get_tag() != 64489.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialdefinition_get_issuer_id() != 19453.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialdefinition_get_json() != 13633.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialoffer_get_schema_id() != 9785.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialoffer_get_cred_def_id() != 54789.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialoffer_get_key_correctness_proof() != 4524.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialoffer_get_nonce() != 8992.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialoffer_get_method_name() != 10089.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialoffer_get_json() != 21450.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialrequest_get_blinded_credential_secrets_json() != 28369.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialrequest_get_blinded_credential_secrets_correctness_proof_json() != 6360.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialrequest_get_nonce() != 29424.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialrequest_get_json() != 26067.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialkeycorrectnessproof_get_json() != 28526.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinition_get_issuer_id() != 55636.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinition_get_tag() != 9407.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinition_get_cred_def_id() != 18370.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinition_get_value() != 54233.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinition_get_json() != 30273.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinitionprivate_get_json() != 49890.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_schema_id() != 5900.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_cred_def_id() != 17534.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_rev_reg_id() != 62977.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_values() != 54784.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_signature_json() != 23915.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_signature_correctness_proof_json() != 52780.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_rev_reg_json() != 55518.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_witness_json() != 40173.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credential_get_json() != 19925.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationstatuslist_get_json() != 26059.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinitionvalue_get_max_cred_num() != 22553.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinitionvalue_get_tails_hash() != 52751.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinitionvalue_get_tails_location() != 10552.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinitionvalue_get_json() != 27094.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_revocationregistrydefinitionvaluepublickeys_get_json() != 2321.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_credentialdefinitionprivate_get_json() != 8321.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_create_schema() != 16570.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_create_credential_definition() != 13296.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_create_revocation_registry_def() != 29924.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_create_revocation_status_list() != 18299.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_update_revocation_status_list_timestamp_only() != 37725.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_update_revocation_status_list() != 64292.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_create_credential_offer() != 26660.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_issuer_create_credential() != 5649.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_prover_create_credential_request() != 26116.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_prover_process_credential() != 64866.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_prover_create_presentation() != 47751.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_prover_create_link_secret() != 11469.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_presentation_get_json() != 57516.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_presentationrequest_get_json() != 64699.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_method_verifier_verify_presentation() != 42012.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_linksecret_new() != 27344.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_linksecret_new_from_value() != 34527.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_nonce_new() != 62144.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_nonce_new_from_value() != 17009.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_credentialdefinition_new() != 21273.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_credentialoffer_new() != 61941.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_credentialrequest_new() != 16217.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_credentialkeycorrectnessproof_new() != 30790.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_revocationregistrydefinition_new() != 35203.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_revocationregistrydefinitionprivate_new() != 17035.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_credential_new() != 21829.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_revocationstatuslist_new() != 41592.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_revocationregistrydefinitionvalue_new() != 15419.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_revocationregistrydefinitionvaluepublickeys_new() != 46152.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_credentialdefinitionprivate_new() != 27360.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_issuer_new() != 52382.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_prover_new() != 45439.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_presentation_new() != 56164.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_presentationrequest_new() != 11986.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi__checksum_constructor_verifier_new() != 16505.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.


public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface CredentialInterface {
    
    fun `getSchemaId`(): SchemaId
    fun `getCredDefId`(): CredentialDefinitionId
    fun `getRevRegId`(): RevocationRegistryId?
    fun `getValues`(): CredentialValues
    fun `getSignatureJson`(): String
    fun `getSignatureCorrectnessProofJson`(): String
    fun `getRevRegJson`(): String?
    fun `getWitnessJson`(): String?@Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class Credential(
    pointer: Pointer
) : FFIObject(pointer), CredentialInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_credential_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_credential(this.pointer, status)
        }
    }

    override fun `getSchemaId`(): SchemaId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_schema_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSchemaId.lift(it)
        }
    
    override fun `getCredDefId`(): CredentialDefinitionId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_cred_def_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeCredentialDefinitionId.lift(it)
        }
    
    override fun `getRevRegId`(): RevocationRegistryId? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_rev_reg_id(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeRevocationRegistryId.lift(it)
        }
    
    override fun `getValues`(): CredentialValues =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_values(it,
        
        _status)
}
        }.let {
            FfiConverterTypeCredentialValues.lift(it)
        }
    
    override fun `getSignatureJson`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_signature_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getSignatureCorrectnessProofJson`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_signature_correctness_proof_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getRevRegJson`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_rev_reg_json(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `getWitnessJson`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_witness_json(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credential_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCredential: FfiConverter<Credential, Pointer> {
    override fun lower(value: Credential): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Credential {
        return Credential(value)
    }

    override fun read(buf: ByteBuffer): Credential {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Credential) = 8

    override fun write(value: Credential, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CredentialDefinitionInterface {
    
    fun `getSchemaId`(): SchemaId
    fun `getSignatureType`(): SignatureType
    fun `getTag`(): String
    fun `getIssuerId`(): IssuerId@Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class CredentialDefinition(
    pointer: Pointer
) : FFIObject(pointer), CredentialDefinitionInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_credentialdefinition_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_credentialdefinition(this.pointer, status)
        }
    }

    override fun `getSchemaId`(): SchemaId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialdefinition_get_schema_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSchemaId.lift(it)
        }
    
    override fun `getSignatureType`(): SignatureType =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialdefinition_get_signature_type(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSignatureType.lift(it)
        }
    
    override fun `getTag`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialdefinition_get_tag(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getIssuerId`(): IssuerId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialdefinition_get_issuer_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeIssuerId.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialdefinition_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCredentialDefinition: FfiConverter<CredentialDefinition, Pointer> {
    override fun lower(value: CredentialDefinition): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CredentialDefinition {
        return CredentialDefinition(value)
    }

    override fun read(buf: ByteBuffer): CredentialDefinition {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CredentialDefinition) = 8

    override fun write(value: CredentialDefinition, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CredentialDefinitionPrivateInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class CredentialDefinitionPrivate(
    pointer: Pointer
) : FFIObject(pointer), CredentialDefinitionPrivateInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_credentialdefinitionprivate_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_credentialdefinitionprivate(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialdefinitionprivate_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCredentialDefinitionPrivate: FfiConverter<CredentialDefinitionPrivate, Pointer> {
    override fun lower(value: CredentialDefinitionPrivate): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CredentialDefinitionPrivate {
        return CredentialDefinitionPrivate(value)
    }

    override fun read(buf: ByteBuffer): CredentialDefinitionPrivate {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CredentialDefinitionPrivate) = 8

    override fun write(value: CredentialDefinitionPrivate, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CredentialKeyCorrectnessProofInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class CredentialKeyCorrectnessProof(
    pointer: Pointer
) : FFIObject(pointer), CredentialKeyCorrectnessProofInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_credentialkeycorrectnessproof_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_credentialkeycorrectnessproof(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialkeycorrectnessproof_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCredentialKeyCorrectnessProof: FfiConverter<CredentialKeyCorrectnessProof, Pointer> {
    override fun lower(value: CredentialKeyCorrectnessProof): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CredentialKeyCorrectnessProof {
        return CredentialKeyCorrectnessProof(value)
    }

    override fun read(buf: ByteBuffer): CredentialKeyCorrectnessProof {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CredentialKeyCorrectnessProof) = 8

    override fun write(value: CredentialKeyCorrectnessProof, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CredentialOfferInterface {
    
    fun `getSchemaId`(): SchemaId
    fun `getCredDefId`(): CredentialDefinitionId
    fun `getKeyCorrectnessProof`(): String
    fun `getNonce`(): Nonce
    fun `getMethodName`(): String?@Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class CredentialOffer(
    pointer: Pointer
) : FFIObject(pointer), CredentialOfferInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_credentialoffer_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_credentialoffer(this.pointer, status)
        }
    }

    override fun `getSchemaId`(): SchemaId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialoffer_get_schema_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSchemaId.lift(it)
        }
    
    override fun `getCredDefId`(): CredentialDefinitionId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialoffer_get_cred_def_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeCredentialDefinitionId.lift(it)
        }
    
    override fun `getKeyCorrectnessProof`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialoffer_get_key_correctness_proof(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getNonce`(): Nonce =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialoffer_get_nonce(it,
        
        _status)
}
        }.let {
            FfiConverterTypeNonce.lift(it)
        }
    
    override fun `getMethodName`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialoffer_get_method_name(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialoffer_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCredentialOffer: FfiConverter<CredentialOffer, Pointer> {
    override fun lower(value: CredentialOffer): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CredentialOffer {
        return CredentialOffer(value)
    }

    override fun read(buf: ByteBuffer): CredentialOffer {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CredentialOffer) = 8

    override fun write(value: CredentialOffer, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CredentialRequestInterface {
    
    fun `getBlindedCredentialSecretsJson`(): String
    fun `getBlindedCredentialSecretsCorrectnessProofJson`(): String
    fun `getNonce`(): Nonce@Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class CredentialRequest(
    pointer: Pointer
) : FFIObject(pointer), CredentialRequestInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_credentialrequest_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_credentialrequest(this.pointer, status)
        }
    }

    override fun `getBlindedCredentialSecretsJson`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialrequest_get_blinded_credential_secrets_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getBlindedCredentialSecretsCorrectnessProofJson`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialrequest_get_blinded_credential_secrets_correctness_proof_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getNonce`(): Nonce =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialrequest_get_nonce(it,
        
        _status)
}
        }.let {
            FfiConverterTypeNonce.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_credentialrequest_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCredentialRequest: FfiConverter<CredentialRequest, Pointer> {
    override fun lower(value: CredentialRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CredentialRequest {
        return CredentialRequest(value)
    }

    override fun read(buf: ByteBuffer): CredentialRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CredentialRequest) = 8

    override fun write(value: CredentialRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface IssuerInterface {
    @Throws(AnoncredsException::class)
    fun `createSchema`(`schemaName`: String, `schemaVersion`: String, `issuerId`: String, `attrNames`: List<String>): Schema@Throws(AnoncredsException::class)
    fun `createCredentialDefinition`(`schemaId`: String, `schema`: Schema, `issuerId`: String, `tag`: String, `signatureType`: SignatureType, `config`: CredentialDefinitionConfig): IssuerCreateCredentialDefinitionReturn@Throws(AnoncredsException::class)
    fun `createRevocationRegistryDef`(`credDef`: CredentialDefinition, `credDefId`: String, `issuerId`: String, `tag`: String, `revRegType`: RegistryType, `maxCredNum`: UInt): IssuerCreateRevocationRegistryDefReturn@Throws(AnoncredsException::class)
    fun `createRevocationStatusList`(`revRegDefId`: String, `revRegDef`: RevocationRegistryDefinition, `issuerId`: String, `timestamp`: ULong?, `issuanceByDefault`: Boolean): RevocationStatusList
    fun `updateRevocationStatusListTimestampOnly`(`timestamp`: ULong, `currentList`: RevocationStatusList): RevocationStatusList@Throws(AnoncredsException::class)
    fun `updateRevocationStatusList`(`timestamp`: ULong?, `issued`: List<UInt>?, `revoked`: List<UInt>?, `revRegDef`: RevocationRegistryDefinition, `currentList`: RevocationStatusList): RevocationStatusList@Throws(AnoncredsException::class)
    fun `createCredentialOffer`(`schemaId`: String, `credDefId`: String, `correctnessProof`: CredentialKeyCorrectnessProof): CredentialOffer@Throws(AnoncredsException::class)
    fun `createCredential`(`credDef`: CredentialDefinition, `credDefPrivate`: CredentialDefinitionPrivate, `credOffer`: CredentialOffer, `credRequest`: CredentialRequest, `credValues`: List<AttributeValues>, `revRegId`: RevocationRegistryId?, `revStatusList`: RevocationStatusList?, `revocationConfig`: CredentialRevocationConfig?): Credential
}

class Issuer(
    pointer: Pointer
) : FFIObject(pointer), IssuerInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_issuer_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_issuer(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `createSchema`(`schemaName`: String, `schemaVersion`: String, `issuerId`: String, `attrNames`: List<String>): Schema =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_create_schema(it,
        FfiConverterString.lower(`schemaName`),FfiConverterString.lower(`schemaVersion`),FfiConverterString.lower(`issuerId`),FfiConverterSequenceString.lower(`attrNames`),
        _status)
}
        }.let {
            FfiConverterTypeSchema.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `createCredentialDefinition`(`schemaId`: String, `schema`: Schema, `issuerId`: String, `tag`: String, `signatureType`: SignatureType, `config`: CredentialDefinitionConfig): IssuerCreateCredentialDefinitionReturn =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_create_credential_definition(it,
        FfiConverterString.lower(`schemaId`),FfiConverterTypeSchema.lower(`schema`),FfiConverterString.lower(`issuerId`),FfiConverterString.lower(`tag`),FfiConverterTypeSignatureType.lower(`signatureType`),FfiConverterTypeCredentialDefinitionConfig.lower(`config`),
        _status)
}
        }.let {
            FfiConverterTypeIssuerCreateCredentialDefinitionReturn.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `createRevocationRegistryDef`(`credDef`: CredentialDefinition, `credDefId`: String, `issuerId`: String, `tag`: String, `revRegType`: RegistryType, `maxCredNum`: UInt): IssuerCreateRevocationRegistryDefReturn =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_create_revocation_registry_def(it,
        FfiConverterTypeCredentialDefinition.lower(`credDef`),FfiConverterString.lower(`credDefId`),FfiConverterString.lower(`issuerId`),FfiConverterString.lower(`tag`),FfiConverterTypeRegistryType.lower(`revRegType`),FfiConverterUInt.lower(`maxCredNum`),
        _status)
}
        }.let {
            FfiConverterTypeIssuerCreateRevocationRegistryDefReturn.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `createRevocationStatusList`(`revRegDefId`: String, `revRegDef`: RevocationRegistryDefinition, `issuerId`: String, `timestamp`: ULong?, `issuanceByDefault`: Boolean): RevocationStatusList =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_create_revocation_status_list(it,
        FfiConverterString.lower(`revRegDefId`),FfiConverterTypeRevocationRegistryDefinition.lower(`revRegDef`),FfiConverterString.lower(`issuerId`),FfiConverterOptionalULong.lower(`timestamp`),FfiConverterBoolean.lower(`issuanceByDefault`),
        _status)
}
        }.let {
            FfiConverterTypeRevocationStatusList.lift(it)
        }
    
    override fun `updateRevocationStatusListTimestampOnly`(`timestamp`: ULong, `currentList`: RevocationStatusList): RevocationStatusList =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_update_revocation_status_list_timestamp_only(it,
        FfiConverterULong.lower(`timestamp`),FfiConverterTypeRevocationStatusList.lower(`currentList`),
        _status)
}
        }.let {
            FfiConverterTypeRevocationStatusList.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `updateRevocationStatusList`(`timestamp`: ULong?, `issued`: List<UInt>?, `revoked`: List<UInt>?, `revRegDef`: RevocationRegistryDefinition, `currentList`: RevocationStatusList): RevocationStatusList =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_update_revocation_status_list(it,
        FfiConverterOptionalULong.lower(`timestamp`),FfiConverterOptionalSequenceUInt.lower(`issued`),FfiConverterOptionalSequenceUInt.lower(`revoked`),FfiConverterTypeRevocationRegistryDefinition.lower(`revRegDef`),FfiConverterTypeRevocationStatusList.lower(`currentList`),
        _status)
}
        }.let {
            FfiConverterTypeRevocationStatusList.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `createCredentialOffer`(`schemaId`: String, `credDefId`: String, `correctnessProof`: CredentialKeyCorrectnessProof): CredentialOffer =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_create_credential_offer(it,
        FfiConverterString.lower(`schemaId`),FfiConverterString.lower(`credDefId`),FfiConverterTypeCredentialKeyCorrectnessProof.lower(`correctnessProof`),
        _status)
}
        }.let {
            FfiConverterTypeCredentialOffer.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `createCredential`(`credDef`: CredentialDefinition, `credDefPrivate`: CredentialDefinitionPrivate, `credOffer`: CredentialOffer, `credRequest`: CredentialRequest, `credValues`: List<AttributeValues>, `revRegId`: RevocationRegistryId?, `revStatusList`: RevocationStatusList?, `revocationConfig`: CredentialRevocationConfig?): Credential =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_issuer_create_credential(it,
        FfiConverterTypeCredentialDefinition.lower(`credDef`),FfiConverterTypeCredentialDefinitionPrivate.lower(`credDefPrivate`),FfiConverterTypeCredentialOffer.lower(`credOffer`),FfiConverterTypeCredentialRequest.lower(`credRequest`),FfiConverterSequenceTypeAttributeValues.lower(`credValues`),FfiConverterOptionalTypeRevocationRegistryId.lower(`revRegId`),FfiConverterOptionalTypeRevocationStatusList.lower(`revStatusList`),FfiConverterOptionalTypeCredentialRevocationConfig.lower(`revocationConfig`),
        _status)
}
        }.let {
            FfiConverterTypeCredential.lift(it)
        }
    
    

    
}

public object FfiConverterTypeIssuer: FfiConverter<Issuer, Pointer> {
    override fun lower(value: Issuer): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Issuer {
        return Issuer(value)
    }

    override fun read(buf: ByteBuffer): Issuer {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Issuer) = 8

    override fun write(value: Issuer, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface LinkSecretInterface {
    
    fun `getBigNumber`(): String@Throws(AnoncredsException::class)
    fun `getValue`(): String
}

class LinkSecret(
    pointer: Pointer
) : FFIObject(pointer), LinkSecretInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_linksecret_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_linksecret(this.pointer, status)
        }
    }

    override fun `getBigNumber`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_linksecret_get_big_number(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getValue`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_linksecret_get_value(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    companion object {
        fun `newFromValue`(`valueString`: String): LinkSecret =
            LinkSecret(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_linksecret_new_from_value(FfiConverterString.lower(`valueString`),_status)
})
        
    }
    
}

public object FfiConverterTypeLinkSecret: FfiConverter<LinkSecret, Pointer> {
    override fun lower(value: LinkSecret): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): LinkSecret {
        return LinkSecret(value)
    }

    override fun read(buf: ByteBuffer): LinkSecret {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: LinkSecret) = 8

    override fun write(value: LinkSecret, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface NonceInterface {
    @Throws(AnoncredsException::class)
    fun `getValue`(): String
}

class Nonce(
    pointer: Pointer
) : FFIObject(pointer), NonceInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_nonce_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_nonce(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getValue`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_nonce_get_value(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    companion object {
        fun `newFromValue`(`valueString`: String): Nonce =
            Nonce(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_nonce_new_from_value(FfiConverterString.lower(`valueString`),_status)
})
        
    }
    
}

public object FfiConverterTypeNonce: FfiConverter<Nonce, Pointer> {
    override fun lower(value: Nonce): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Nonce {
        return Nonce(value)
    }

    override fun read(buf: ByteBuffer): Nonce {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Nonce) = 8

    override fun write(value: Nonce, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface PresentationInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class Presentation(
    pointer: Pointer
) : FFIObject(pointer), PresentationInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_presentation_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_presentation(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_presentation_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypePresentation: FfiConverter<Presentation, Pointer> {
    override fun lower(value: Presentation): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Presentation {
        return Presentation(value)
    }

    override fun read(buf: ByteBuffer): Presentation {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Presentation) = 8

    override fun write(value: Presentation, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface PresentationRequestInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class PresentationRequest(
    pointer: Pointer
) : FFIObject(pointer), PresentationRequestInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_presentationrequest_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_presentationrequest(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_presentationrequest_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypePresentationRequest: FfiConverter<PresentationRequest, Pointer> {
    override fun lower(value: PresentationRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): PresentationRequest {
        return PresentationRequest(value)
    }

    override fun read(buf: ByteBuffer): PresentationRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: PresentationRequest) = 8

    override fun write(value: PresentationRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface ProverInterface {
    @Throws(AnoncredsException::class)
    fun `createCredentialRequest`(`entropy`: String?, `proverDid`: String?, `credDef`: CredentialDefinition, `linkSecret`: LinkSecret, `linkSecretId`: String, `credentialOffer`: CredentialOffer): CreateCrendentialRequestResponse@Throws(AnoncredsException::class)
    fun `processCredential`(`credential`: Credential, `credRequestMetadata`: CredentialRequestMetadata, `linkSecret`: LinkSecret, `credDef`: CredentialDefinition, `revRegDef`: RevocationRegistryDefinition?)@Throws(AnoncredsException::class)
    fun `createPresentation`(`presentationRequest`: PresentationRequest, `credentials`: List<CredentialRequests>, `selfAttested`: Map<String, String>?, `linkSecret`: LinkSecret, `schemas`: Map<SchemaId, Schema>, `credentialDefinitions`: Map<CredentialDefinitionId, CredentialDefinition>): Presentation
    fun `createLinkSecret`(): LinkSecret
}

class Prover(
    pointer: Pointer
) : FFIObject(pointer), ProverInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_prover_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_prover(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `createCredentialRequest`(`entropy`: String?, `proverDid`: String?, `credDef`: CredentialDefinition, `linkSecret`: LinkSecret, `linkSecretId`: String, `credentialOffer`: CredentialOffer): CreateCrendentialRequestResponse =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_prover_create_credential_request(it,
        FfiConverterOptionalString.lower(`entropy`),FfiConverterOptionalString.lower(`proverDid`),FfiConverterTypeCredentialDefinition.lower(`credDef`),FfiConverterTypeLinkSecret.lower(`linkSecret`),FfiConverterString.lower(`linkSecretId`),FfiConverterTypeCredentialOffer.lower(`credentialOffer`),
        _status)
}
        }.let {
            FfiConverterTypeCreateCrendentialRequestResponse.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `processCredential`(`credential`: Credential, `credRequestMetadata`: CredentialRequestMetadata, `linkSecret`: LinkSecret, `credDef`: CredentialDefinition, `revRegDef`: RevocationRegistryDefinition?) =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_prover_process_credential(it,
        FfiConverterTypeCredential.lower(`credential`),FfiConverterTypeCredentialRequestMetadata.lower(`credRequestMetadata`),FfiConverterTypeLinkSecret.lower(`linkSecret`),FfiConverterTypeCredentialDefinition.lower(`credDef`),FfiConverterOptionalTypeRevocationRegistryDefinition.lower(`revRegDef`),
        _status)
}
        }
    
    
    
    @Throws(AnoncredsException::class)override fun `createPresentation`(`presentationRequest`: PresentationRequest, `credentials`: List<CredentialRequests>, `selfAttested`: Map<String, String>?, `linkSecret`: LinkSecret, `schemas`: Map<SchemaId, Schema>, `credentialDefinitions`: Map<CredentialDefinitionId, CredentialDefinition>): Presentation =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_prover_create_presentation(it,
        FfiConverterTypePresentationRequest.lower(`presentationRequest`),FfiConverterSequenceTypeCredentialRequests.lower(`credentials`),FfiConverterOptionalMapStringString.lower(`selfAttested`),FfiConverterTypeLinkSecret.lower(`linkSecret`),FfiConverterMapTypeSchemaIdTypeSchema.lower(`schemas`),FfiConverterMapTypeCredentialDefinitionIdTypeCredentialDefinition.lower(`credentialDefinitions`),
        _status)
}
        }.let {
            FfiConverterTypePresentation.lift(it)
        }
    
    override fun `createLinkSecret`(): LinkSecret =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_prover_create_link_secret(it,
        
        _status)
}
        }.let {
            FfiConverterTypeLinkSecret.lift(it)
        }
    
    

    
}

public object FfiConverterTypeProver: FfiConverter<Prover, Pointer> {
    override fun lower(value: Prover): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Prover {
        return Prover(value)
    }

    override fun read(buf: ByteBuffer): Prover {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Prover) = 8

    override fun write(value: Prover, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface RevocationRegistryDefinitionInterface {
    
    fun `getIssuerId`(): IssuerId
    fun `getTag`(): String
    fun `getCredDefId`(): CredentialDefinitionId
    fun `getValue`(): RevocationRegistryDefinitionValue@Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class RevocationRegistryDefinition(
    pointer: Pointer
) : FFIObject(pointer), RevocationRegistryDefinitionInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_revocationregistrydefinition_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_revocationregistrydefinition(this.pointer, status)
        }
    }

    override fun `getIssuerId`(): IssuerId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinition_get_issuer_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeIssuerId.lift(it)
        }
    
    override fun `getTag`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinition_get_tag(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getCredDefId`(): CredentialDefinitionId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinition_get_cred_def_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeCredentialDefinitionId.lift(it)
        }
    
    override fun `getValue`(): RevocationRegistryDefinitionValue =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinition_get_value(it,
        
        _status)
}
        }.let {
            FfiConverterTypeRevocationRegistryDefinitionValue.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinition_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeRevocationRegistryDefinition: FfiConverter<RevocationRegistryDefinition, Pointer> {
    override fun lower(value: RevocationRegistryDefinition): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RevocationRegistryDefinition {
        return RevocationRegistryDefinition(value)
    }

    override fun read(buf: ByteBuffer): RevocationRegistryDefinition {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RevocationRegistryDefinition) = 8

    override fun write(value: RevocationRegistryDefinition, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface RevocationRegistryDefinitionPrivateInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class RevocationRegistryDefinitionPrivate(
    pointer: Pointer
) : FFIObject(pointer), RevocationRegistryDefinitionPrivateInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_revocationregistrydefinitionprivate_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_revocationregistrydefinitionprivate(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinitionprivate_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeRevocationRegistryDefinitionPrivate: FfiConverter<RevocationRegistryDefinitionPrivate, Pointer> {
    override fun lower(value: RevocationRegistryDefinitionPrivate): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RevocationRegistryDefinitionPrivate {
        return RevocationRegistryDefinitionPrivate(value)
    }

    override fun read(buf: ByteBuffer): RevocationRegistryDefinitionPrivate {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RevocationRegistryDefinitionPrivate) = 8

    override fun write(value: RevocationRegistryDefinitionPrivate, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface RevocationRegistryDefinitionValueInterface {
    
    fun `getMaxCredNum`(): UInt
    fun `getTailsHash`(): String
    fun `getTailsLocation`(): String@Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class RevocationRegistryDefinitionValue(
    pointer: Pointer
) : FFIObject(pointer), RevocationRegistryDefinitionValueInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_revocationregistrydefinitionvalue_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_revocationregistrydefinitionvalue(this.pointer, status)
        }
    }

    override fun `getMaxCredNum`(): UInt =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_max_cred_num(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    override fun `getTailsHash`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_tails_hash(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `getTailsLocation`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_tails_location(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeRevocationRegistryDefinitionValue: FfiConverter<RevocationRegistryDefinitionValue, Pointer> {
    override fun lower(value: RevocationRegistryDefinitionValue): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RevocationRegistryDefinitionValue {
        return RevocationRegistryDefinitionValue(value)
    }

    override fun read(buf: ByteBuffer): RevocationRegistryDefinitionValue {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RevocationRegistryDefinitionValue) = 8

    override fun write(value: RevocationRegistryDefinitionValue, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface RevocationRegistryDefinitionValuePublicKeysInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class RevocationRegistryDefinitionValuePublicKeys(
    pointer: Pointer
) : FFIObject(pointer), RevocationRegistryDefinitionValuePublicKeysInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_revocationregistrydefinitionvaluepublickeys_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_revocationregistrydefinitionvaluepublickeys(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationregistrydefinitionvaluepublickeys_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys: FfiConverter<RevocationRegistryDefinitionValuePublicKeys, Pointer> {
    override fun lower(value: RevocationRegistryDefinitionValuePublicKeys): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RevocationRegistryDefinitionValuePublicKeys {
        return RevocationRegistryDefinitionValuePublicKeys(value)
    }

    override fun read(buf: ByteBuffer): RevocationRegistryDefinitionValuePublicKeys {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RevocationRegistryDefinitionValuePublicKeys) = 8

    override fun write(value: RevocationRegistryDefinitionValuePublicKeys, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface RevocationStatusListInterface {
    @Throws(AnoncredsException::class)
    fun `getJson`(): String
}

class RevocationStatusList(
    pointer: Pointer
) : FFIObject(pointer), RevocationStatusListInterface {
    constructor(`jsonString`: String) :
        this(
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_revocationstatuslist_new(FfiConverterString.lower(`jsonString`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_revocationstatuslist(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `getJson`(): String =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_revocationstatuslist_get_json(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeRevocationStatusList: FfiConverter<RevocationStatusList, Pointer> {
    override fun lower(value: RevocationStatusList): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RevocationStatusList {
        return RevocationStatusList(value)
    }

    override fun read(buf: ByteBuffer): RevocationStatusList {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RevocationStatusList) = 8

    override fun write(value: RevocationStatusList, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface VerifierInterface {
    @Throws(AnoncredsException::class)
    fun `verifyPresentation`(`presentation`: Presentation, `presentationRequest`: PresentationRequest, `schemas`: Map<SchemaId, Schema>, `credentialDefinitions`: Map<CredentialDefinitionId, CredentialDefinition>): Boolean
}

class Verifier(
    pointer: Pointer
) : FFIObject(pointer), VerifierInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_constructor_verifier_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_anoncreds_fn_free_verifier(this.pointer, status)
        }
    }

    
    @Throws(AnoncredsException::class)override fun `verifyPresentation`(`presentation`: Presentation, `presentationRequest`: PresentationRequest, `schemas`: Map<SchemaId, Schema>, `credentialDefinitions`: Map<CredentialDefinitionId, CredentialDefinition>): Boolean =
        callWithPointer {
    rustCallWithError(AnoncredsException) { _status ->
    _UniFFILib.INSTANCE.uniffi_anoncreds_fn_method_verifier_verify_presentation(it,
        FfiConverterTypePresentation.lower(`presentation`),FfiConverterTypePresentationRequest.lower(`presentationRequest`),FfiConverterMapTypeSchemaIdTypeSchema.lower(`schemas`),FfiConverterMapTypeCredentialDefinitionIdTypeCredentialDefinition.lower(`credentialDefinitions`),
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    

    
}

public object FfiConverterTypeVerifier: FfiConverter<Verifier, Pointer> {
    override fun lower(value: Verifier): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Verifier {
        return Verifier(value)
    }

    override fun read(buf: ByteBuffer): Verifier {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Verifier) = 8

    override fun write(value: Verifier, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class AttributeValues (
    var `raw`: String, 
    var `encoded`: String
) {
    
}

public object FfiConverterTypeAttributeValues: FfiConverterRustBuffer<AttributeValues> {
    override fun read(buf: ByteBuffer): AttributeValues {
        return AttributeValues(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AttributeValues) = (
            FfiConverterString.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`encoded`)
    )

    override fun write(value: AttributeValues, buf: ByteBuffer) {
            FfiConverterString.write(value.`raw`, buf)
            FfiConverterString.write(value.`encoded`, buf)
    }
}




data class CreateCrendentialRequestResponse (
    var `request`: CredentialRequest, 
    var `metadata`: CredentialRequestMetadata
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`request`, 
        this.`metadata`)
    }
    
}

public object FfiConverterTypeCreateCrendentialRequestResponse: FfiConverterRustBuffer<CreateCrendentialRequestResponse> {
    override fun read(buf: ByteBuffer): CreateCrendentialRequestResponse {
        return CreateCrendentialRequestResponse(
            FfiConverterTypeCredentialRequest.read(buf),
            FfiConverterTypeCredentialRequestMetadata.read(buf),
        )
    }

    override fun allocationSize(value: CreateCrendentialRequestResponse) = (
            FfiConverterTypeCredentialRequest.allocationSize(value.`request`) +
            FfiConverterTypeCredentialRequestMetadata.allocationSize(value.`metadata`)
    )

    override fun write(value: CreateCrendentialRequestResponse, buf: ByteBuffer) {
            FfiConverterTypeCredentialRequest.write(value.`request`, buf)
            FfiConverterTypeCredentialRequestMetadata.write(value.`metadata`, buf)
    }
}




data class CredentialDefinitionConfig (
    var `supportRevocation`: Boolean
) {
    
}

public object FfiConverterTypeCredentialDefinitionConfig: FfiConverterRustBuffer<CredentialDefinitionConfig> {
    override fun read(buf: ByteBuffer): CredentialDefinitionConfig {
        return CredentialDefinitionConfig(
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CredentialDefinitionConfig) = (
            FfiConverterBoolean.allocationSize(value.`supportRevocation`)
    )

    override fun write(value: CredentialDefinitionConfig, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`supportRevocation`, buf)
    }
}




data class CredentialDefinitionData (
    var `primary`: String, 
    var `revocation`: String?
) {
    
}

public object FfiConverterTypeCredentialDefinitionData: FfiConverterRustBuffer<CredentialDefinitionData> {
    override fun read(buf: ByteBuffer): CredentialDefinitionData {
        return CredentialDefinitionData(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: CredentialDefinitionData) = (
            FfiConverterString.allocationSize(value.`primary`) +
            FfiConverterOptionalString.allocationSize(value.`revocation`)
    )

    override fun write(value: CredentialDefinitionData, buf: ByteBuffer) {
            FfiConverterString.write(value.`primary`, buf)
            FfiConverterOptionalString.write(value.`revocation`, buf)
    }
}




data class CredentialRequestMetadata (
    var `linkSecretBlindingData`: String, 
    var `nonce`: Nonce, 
    var `linkSecretName`: String
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`linkSecretBlindingData`, 
        this.`nonce`, 
        this.`linkSecretName`)
    }
    
}

public object FfiConverterTypeCredentialRequestMetadata: FfiConverterRustBuffer<CredentialRequestMetadata> {
    override fun read(buf: ByteBuffer): CredentialRequestMetadata {
        return CredentialRequestMetadata(
            FfiConverterString.read(buf),
            FfiConverterTypeNonce.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: CredentialRequestMetadata) = (
            FfiConverterString.allocationSize(value.`linkSecretBlindingData`) +
            FfiConverterTypeNonce.allocationSize(value.`nonce`) +
            FfiConverterString.allocationSize(value.`linkSecretName`)
    )

    override fun write(value: CredentialRequestMetadata, buf: ByteBuffer) {
            FfiConverterString.write(value.`linkSecretBlindingData`, buf)
            FfiConverterTypeNonce.write(value.`nonce`, buf)
            FfiConverterString.write(value.`linkSecretName`, buf)
    }
}




data class CredentialRequests (
    var `credential`: Credential, 
    var `requestedAttribute`: List<RequestedAttribute>, 
    var `requestedPredicate`: List<RequestedPredicate>
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`credential`, 
        this.`requestedAttribute`, 
        this.`requestedPredicate`)
    }
    
}

public object FfiConverterTypeCredentialRequests: FfiConverterRustBuffer<CredentialRequests> {
    override fun read(buf: ByteBuffer): CredentialRequests {
        return CredentialRequests(
            FfiConverterTypeCredential.read(buf),
            FfiConverterSequenceTypeRequestedAttribute.read(buf),
            FfiConverterSequenceTypeRequestedPredicate.read(buf),
        )
    }

    override fun allocationSize(value: CredentialRequests) = (
            FfiConverterTypeCredential.allocationSize(value.`credential`) +
            FfiConverterSequenceTypeRequestedAttribute.allocationSize(value.`requestedAttribute`) +
            FfiConverterSequenceTypeRequestedPredicate.allocationSize(value.`requestedPredicate`)
    )

    override fun write(value: CredentialRequests, buf: ByteBuffer) {
            FfiConverterTypeCredential.write(value.`credential`, buf)
            FfiConverterSequenceTypeRequestedAttribute.write(value.`requestedAttribute`, buf)
            FfiConverterSequenceTypeRequestedPredicate.write(value.`requestedPredicate`, buf)
    }
}




data class CredentialRevocationConfig (
    var `regDef`: RevocationRegistryDefinition, 
    var `regDefPrivate`: RevocationRegistryDefinitionPrivate, 
    var `registryIdx`: UInt
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`regDef`, 
        this.`regDefPrivate`, 
        this.`registryIdx`)
    }
    
}

public object FfiConverterTypeCredentialRevocationConfig: FfiConverterRustBuffer<CredentialRevocationConfig> {
    override fun read(buf: ByteBuffer): CredentialRevocationConfig {
        return CredentialRevocationConfig(
            FfiConverterTypeRevocationRegistryDefinition.read(buf),
            FfiConverterTypeRevocationRegistryDefinitionPrivate.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: CredentialRevocationConfig) = (
            FfiConverterTypeRevocationRegistryDefinition.allocationSize(value.`regDef`) +
            FfiConverterTypeRevocationRegistryDefinitionPrivate.allocationSize(value.`regDefPrivate`) +
            FfiConverterUInt.allocationSize(value.`registryIdx`)
    )

    override fun write(value: CredentialRevocationConfig, buf: ByteBuffer) {
            FfiConverterTypeRevocationRegistryDefinition.write(value.`regDef`, buf)
            FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.`regDefPrivate`, buf)
            FfiConverterUInt.write(value.`registryIdx`, buf)
    }
}




data class CredentialValues (
    var `values`: Map<String, AttributeValues>
) {
    
}

public object FfiConverterTypeCredentialValues: FfiConverterRustBuffer<CredentialValues> {
    override fun read(buf: ByteBuffer): CredentialValues {
        return CredentialValues(
            FfiConverterMapStringTypeAttributeValues.read(buf),
        )
    }

    override fun allocationSize(value: CredentialValues) = (
            FfiConverterMapStringTypeAttributeValues.allocationSize(value.`values`)
    )

    override fun write(value: CredentialValues, buf: ByteBuffer) {
            FfiConverterMapStringTypeAttributeValues.write(value.`values`, buf)
    }
}




data class IssuerCreateCredentialDefinitionReturn (
    var `credentialDefinition`: CredentialDefinition, 
    var `credentialDefinitionPrivate`: CredentialDefinitionPrivate, 
    var `credentialKeyCorrectnessProof`: CredentialKeyCorrectnessProof
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`credentialDefinition`, 
        this.`credentialDefinitionPrivate`, 
        this.`credentialKeyCorrectnessProof`)
    }
    
}

public object FfiConverterTypeIssuerCreateCredentialDefinitionReturn: FfiConverterRustBuffer<IssuerCreateCredentialDefinitionReturn> {
    override fun read(buf: ByteBuffer): IssuerCreateCredentialDefinitionReturn {
        return IssuerCreateCredentialDefinitionReturn(
            FfiConverterTypeCredentialDefinition.read(buf),
            FfiConverterTypeCredentialDefinitionPrivate.read(buf),
            FfiConverterTypeCredentialKeyCorrectnessProof.read(buf),
        )
    }

    override fun allocationSize(value: IssuerCreateCredentialDefinitionReturn) = (
            FfiConverterTypeCredentialDefinition.allocationSize(value.`credentialDefinition`) +
            FfiConverterTypeCredentialDefinitionPrivate.allocationSize(value.`credentialDefinitionPrivate`) +
            FfiConverterTypeCredentialKeyCorrectnessProof.allocationSize(value.`credentialKeyCorrectnessProof`)
    )

    override fun write(value: IssuerCreateCredentialDefinitionReturn, buf: ByteBuffer) {
            FfiConverterTypeCredentialDefinition.write(value.`credentialDefinition`, buf)
            FfiConverterTypeCredentialDefinitionPrivate.write(value.`credentialDefinitionPrivate`, buf)
            FfiConverterTypeCredentialKeyCorrectnessProof.write(value.`credentialKeyCorrectnessProof`, buf)
    }
}




data class IssuerCreateRevocationRegistryDefReturn (
    var `regDef`: RevocationRegistryDefinition, 
    var `regDefPrivate`: RevocationRegistryDefinitionPrivate
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`regDef`, 
        this.`regDefPrivate`)
    }
    
}

public object FfiConverterTypeIssuerCreateRevocationRegistryDefReturn: FfiConverterRustBuffer<IssuerCreateRevocationRegistryDefReturn> {
    override fun read(buf: ByteBuffer): IssuerCreateRevocationRegistryDefReturn {
        return IssuerCreateRevocationRegistryDefReturn(
            FfiConverterTypeRevocationRegistryDefinition.read(buf),
            FfiConverterTypeRevocationRegistryDefinitionPrivate.read(buf),
        )
    }

    override fun allocationSize(value: IssuerCreateRevocationRegistryDefReturn) = (
            FfiConverterTypeRevocationRegistryDefinition.allocationSize(value.`regDef`) +
            FfiConverterTypeRevocationRegistryDefinitionPrivate.allocationSize(value.`regDefPrivate`)
    )

    override fun write(value: IssuerCreateRevocationRegistryDefReturn, buf: ByteBuffer) {
            FfiConverterTypeRevocationRegistryDefinition.write(value.`regDef`, buf)
            FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.`regDefPrivate`, buf)
    }
}




data class RequestedAttribute (
    var `referent`: String, 
    var `revealed`: Boolean
) {
    
}

public object FfiConverterTypeRequestedAttribute: FfiConverterRustBuffer<RequestedAttribute> {
    override fun read(buf: ByteBuffer): RequestedAttribute {
        return RequestedAttribute(
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: RequestedAttribute) = (
            FfiConverterString.allocationSize(value.`referent`) +
            FfiConverterBoolean.allocationSize(value.`revealed`)
    )

    override fun write(value: RequestedAttribute, buf: ByteBuffer) {
            FfiConverterString.write(value.`referent`, buf)
            FfiConverterBoolean.write(value.`revealed`, buf)
    }
}




data class RequestedPredicate (
    var `referent`: String
) {
    
}

public object FfiConverterTypeRequestedPredicate: FfiConverterRustBuffer<RequestedPredicate> {
    override fun read(buf: ByteBuffer): RequestedPredicate {
        return RequestedPredicate(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: RequestedPredicate) = (
            FfiConverterString.allocationSize(value.`referent`)
    )

    override fun write(value: RequestedPredicate, buf: ByteBuffer) {
            FfiConverterString.write(value.`referent`, buf)
    }
}




data class Schema (
    var `name`: String, 
    var `version`: String, 
    var `attrNames`: AttributeNames, 
    var `issuerId`: IssuerId
) {
    
}

public object FfiConverterTypeSchema: FfiConverterRustBuffer<Schema> {
    override fun read(buf: ByteBuffer): Schema {
        return Schema(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeAttributeNames.read(buf),
            FfiConverterTypeIssuerId.read(buf),
        )
    }

    override fun allocationSize(value: Schema) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`version`) +
            FfiConverterTypeAttributeNames.allocationSize(value.`attrNames`) +
            FfiConverterTypeIssuerId.allocationSize(value.`issuerId`)
    )

    override fun write(value: Schema, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`version`, buf)
            FfiConverterTypeAttributeNames.write(value.`attrNames`, buf)
            FfiConverterTypeIssuerId.write(value.`issuerId`, buf)
    }
}





sealed class AnoncredsException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class ConversionException(message: String) : AnoncredsException(message)
        class SomethingWentWrong(message: String) : AnoncredsException(message)
        class CreateCrentialRequestException(message: String) : AnoncredsException(message)
        class CreateSchemaException(message: String) : AnoncredsException(message)
        class CreateCredentialDefinition(message: String) : AnoncredsException(message)
        class CreateRevocationRegistryDef(message: String) : AnoncredsException(message)
        class CreateRevocationStatusList(message: String) : AnoncredsException(message)
        class UpdateRevocationStatusList(message: String) : AnoncredsException(message)
        class CreateCredentialOffer(message: String) : AnoncredsException(message)
        class CreateCredential(message: String) : AnoncredsException(message)
        class ProcessCredential(message: String) : AnoncredsException(message)
        class CreatePresentationException(message: String) : AnoncredsException(message)
        class ProcessCredentialException(message: String) : AnoncredsException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<AnoncredsException> {
        override fun lift(error_buf: RustBuffer.ByValue): AnoncredsException = FfiConverterTypeAnoncredsError.lift(error_buf)
    }
}

public object FfiConverterTypeAnoncredsError : FfiConverterRustBuffer<AnoncredsException> {
    override fun read(buf: ByteBuffer): AnoncredsException {
        
            return when(buf.getInt()) {
            1 -> AnoncredsException.ConversionException(FfiConverterString.read(buf))
            2 -> AnoncredsException.SomethingWentWrong(FfiConverterString.read(buf))
            3 -> AnoncredsException.CreateCrentialRequestException(FfiConverterString.read(buf))
            4 -> AnoncredsException.CreateSchemaException(FfiConverterString.read(buf))
            5 -> AnoncredsException.CreateCredentialDefinition(FfiConverterString.read(buf))
            6 -> AnoncredsException.CreateRevocationRegistryDef(FfiConverterString.read(buf))
            7 -> AnoncredsException.CreateRevocationStatusList(FfiConverterString.read(buf))
            8 -> AnoncredsException.UpdateRevocationStatusList(FfiConverterString.read(buf))
            9 -> AnoncredsException.CreateCredentialOffer(FfiConverterString.read(buf))
            10 -> AnoncredsException.CreateCredential(FfiConverterString.read(buf))
            11 -> AnoncredsException.ProcessCredential(FfiConverterString.read(buf))
            12 -> AnoncredsException.CreatePresentationException(FfiConverterString.read(buf))
            13 -> AnoncredsException.ProcessCredentialException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: AnoncredsException): Int {
        return 4
    }

    override fun write(value: AnoncredsException, buf: ByteBuffer) {
        when(value) {
            is AnoncredsException.ConversionException -> {
                buf.putInt(1)
                Unit
            }
            is AnoncredsException.SomethingWentWrong -> {
                buf.putInt(2)
                Unit
            }
            is AnoncredsException.CreateCrentialRequestException -> {
                buf.putInt(3)
                Unit
            }
            is AnoncredsException.CreateSchemaException -> {
                buf.putInt(4)
                Unit
            }
            is AnoncredsException.CreateCredentialDefinition -> {
                buf.putInt(5)
                Unit
            }
            is AnoncredsException.CreateRevocationRegistryDef -> {
                buf.putInt(6)
                Unit
            }
            is AnoncredsException.CreateRevocationStatusList -> {
                buf.putInt(7)
                Unit
            }
            is AnoncredsException.UpdateRevocationStatusList -> {
                buf.putInt(8)
                Unit
            }
            is AnoncredsException.CreateCredentialOffer -> {
                buf.putInt(9)
                Unit
            }
            is AnoncredsException.CreateCredential -> {
                buf.putInt(10)
                Unit
            }
            is AnoncredsException.ProcessCredential -> {
                buf.putInt(11)
                Unit
            }
            is AnoncredsException.CreatePresentationException -> {
                buf.putInt(12)
                Unit
            }
            is AnoncredsException.ProcessCredentialException -> {
                buf.putInt(13)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class RegistryType {
    CL_ACCUM;
}

public object FfiConverterTypeRegistryType: FfiConverterRustBuffer<RegistryType> {
    override fun read(buf: ByteBuffer) = try {
        RegistryType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RegistryType) = 4

    override fun write(value: RegistryType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class SignatureType {
    CL;
}

public object FfiConverterTypeSignatureType: FfiConverterRustBuffer<SignatureType> {
    override fun read(buf: ByteBuffer) = try {
        SignatureType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: SignatureType) = 4

    override fun write(value: SignatureType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRevocationRegistryDefinition: FfiConverterRustBuffer<RevocationRegistryDefinition?> {
    override fun read(buf: ByteBuffer): RevocationRegistryDefinition? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRevocationRegistryDefinition.read(buf)
    }

    override fun allocationSize(value: RevocationRegistryDefinition?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRevocationRegistryDefinition.allocationSize(value)
        }
    }

    override fun write(value: RevocationRegistryDefinition?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRevocationRegistryDefinition.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRevocationStatusList: FfiConverterRustBuffer<RevocationStatusList?> {
    override fun read(buf: ByteBuffer): RevocationStatusList? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRevocationStatusList.read(buf)
    }

    override fun allocationSize(value: RevocationStatusList?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRevocationStatusList.allocationSize(value)
        }
    }

    override fun write(value: RevocationStatusList?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRevocationStatusList.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCredentialRevocationConfig: FfiConverterRustBuffer<CredentialRevocationConfig?> {
    override fun read(buf: ByteBuffer): CredentialRevocationConfig? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCredentialRevocationConfig.read(buf)
    }

    override fun allocationSize(value: CredentialRevocationConfig?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCredentialRevocationConfig.allocationSize(value)
        }
    }

    override fun write(value: CredentialRevocationConfig?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCredentialRevocationConfig.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceUInt: FfiConverterRustBuffer<List<UInt>?> {
    override fun read(buf: ByteBuffer): List<UInt>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceUInt.read(buf)
    }

    override fun allocationSize(value: List<UInt>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceUInt.allocationSize(value)
        }
    }

    override fun write(value: List<UInt>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalMapStringString: FfiConverterRustBuffer<Map<String, String>?> {
    override fun read(buf: ByteBuffer): Map<String, String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterMapStringString.read(buf)
    }

    override fun allocationSize(value: Map<String, String>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterMapStringString.allocationSize(value)
        }
    }

    override fun write(value: Map<String, String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterMapStringString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRevocationRegistryId: FfiConverterRustBuffer<RevocationRegistryId?> {
    override fun read(buf: ByteBuffer): RevocationRegistryId? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRevocationRegistryId.read(buf)
    }

    override fun allocationSize(value: RevocationRegistryId?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRevocationRegistryId.allocationSize(value)
        }
    }

    override fun write(value: RevocationRegistryId?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRevocationRegistryId.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUInt: FfiConverterRustBuffer<List<UInt>> {
    override fun read(buf: ByteBuffer): List<UInt> {
        val len = buf.getInt()
        return List<UInt>(len) {
            FfiConverterUInt.read(buf)
        }
    }

    override fun allocationSize(value: List<UInt>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUInt.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UInt>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUInt.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeAttributeValues: FfiConverterRustBuffer<List<AttributeValues>> {
    override fun read(buf: ByteBuffer): List<AttributeValues> {
        val len = buf.getInt()
        return List<AttributeValues>(len) {
            FfiConverterTypeAttributeValues.read(buf)
        }
    }

    override fun allocationSize(value: List<AttributeValues>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeAttributeValues.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AttributeValues>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeAttributeValues.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeCredentialRequests: FfiConverterRustBuffer<List<CredentialRequests>> {
    override fun read(buf: ByteBuffer): List<CredentialRequests> {
        val len = buf.getInt()
        return List<CredentialRequests>(len) {
            FfiConverterTypeCredentialRequests.read(buf)
        }
    }

    override fun allocationSize(value: List<CredentialRequests>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeCredentialRequests.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<CredentialRequests>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeCredentialRequests.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRequestedAttribute: FfiConverterRustBuffer<List<RequestedAttribute>> {
    override fun read(buf: ByteBuffer): List<RequestedAttribute> {
        val len = buf.getInt()
        return List<RequestedAttribute>(len) {
            FfiConverterTypeRequestedAttribute.read(buf)
        }
    }

    override fun allocationSize(value: List<RequestedAttribute>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRequestedAttribute.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RequestedAttribute>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRequestedAttribute.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRequestedPredicate: FfiConverterRustBuffer<List<RequestedPredicate>> {
    override fun read(buf: ByteBuffer): List<RequestedPredicate> {
        val len = buf.getInt()
        return List<RequestedPredicate>(len) {
            FfiConverterTypeRequestedPredicate.read(buf)
        }
    }

    override fun allocationSize(value: List<RequestedPredicate>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRequestedPredicate.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RequestedPredicate>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRequestedPredicate.write(it, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<String, String>> {
    override fun read(buf: ByteBuffer): Map<String, String> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, String> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, String>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringTypeAttributeValues: FfiConverterRustBuffer<Map<String, AttributeValues>> {
    override fun read(buf: ByteBuffer): Map<String, AttributeValues> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, AttributeValues> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterTypeAttributeValues.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, AttributeValues>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeAttributeValues.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, AttributeValues>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeAttributeValues.write(v, buf)
        }
    }
}



public object FfiConverterMapTypeCredentialDefinitionIdTypeCredentialDefinition: FfiConverterRustBuffer<Map<CredentialDefinitionId, CredentialDefinition>> {
    override fun read(buf: ByteBuffer): Map<CredentialDefinitionId, CredentialDefinition> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<CredentialDefinitionId, CredentialDefinition> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterTypeCredentialDefinitionId.read(buf)
            val v = FfiConverterTypeCredentialDefinition.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<CredentialDefinitionId, CredentialDefinition>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterTypeCredentialDefinitionId.allocationSize(k) +
            FfiConverterTypeCredentialDefinition.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<CredentialDefinitionId, CredentialDefinition>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterTypeCredentialDefinitionId.write(k, buf)
            FfiConverterTypeCredentialDefinition.write(v, buf)
        }
    }
}



public object FfiConverterMapTypeSchemaIdTypeSchema: FfiConverterRustBuffer<Map<SchemaId, Schema>> {
    override fun read(buf: ByteBuffer): Map<SchemaId, Schema> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<SchemaId, Schema> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterTypeSchemaId.read(buf)
            val v = FfiConverterTypeSchema.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<SchemaId, Schema>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterTypeSchemaId.allocationSize(k) +
            FfiConverterTypeSchema.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<SchemaId, Schema>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterTypeSchemaId.write(k, buf)
            FfiConverterTypeSchema.write(v, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias AttributeNames = List<String>
public typealias FfiConverterTypeAttributeNames = FfiConverterSequenceString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias CredentialDefinitionId = String
public typealias FfiConverterTypeCredentialDefinitionId = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias IssuerId = String
public typealias FfiConverterTypeIssuerId = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias RevocationRegistryDefinitionId = String
public typealias FfiConverterTypeRevocationRegistryDefinitionId = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias RevocationRegistryId = String
public typealias FfiConverterTypeRevocationRegistryId = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias SchemaId = String
public typealias FfiConverterTypeSchemaId = FfiConverterString

