// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(anoncredsFFI)
    import anoncredsFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_anoncreds_d8c0_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_anoncreds_d8c0_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
        let writer = Writer()
        write(value, into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
(_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
{
    try makeRustCall(callback, errorHandler: { try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    static func read(from buf: Reader) throws -> UInt32 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}

public protocol CredentialProtocol {
    func getSchemaId() -> SchemaId
    func getCredDefId() -> CredentialDefinitionId
    func getRevRegId() -> RevocationRegistryId?
    func getValues() -> CredentialValues
    func getSignatureJson() -> String
    func getSignatureCorrectnessProofJson() -> String
    func getRevRegJson() -> String?
    func getWitnessJson() -> String?
    func getJson() throws -> String
}

public class Credential: CredentialProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_Credential_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_Credential_object_free(pointer, $0) }
    }

    public func getSchemaId() -> SchemaId {
        return try! FfiConverterTypeSchemaId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_schema_id(self.pointer, $0)
                }
        )
    }

    public func getCredDefId() -> CredentialDefinitionId {
        return try! FfiConverterTypeCredentialDefinitionId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_cred_def_id(self.pointer, $0)
                }
        )
    }

    public func getRevRegId() -> RevocationRegistryId? {
        return try! FfiConverterOptionTypeRevocationRegistryId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_rev_reg_id(self.pointer, $0)
                }
        )
    }

    public func getValues() -> CredentialValues {
        return try! FfiConverterTypeCredentialValues.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_values(self.pointer, $0)
                }
        )
    }

    public func getSignatureJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_signature_json(self.pointer, $0)
                }
        )
    }

    public func getSignatureCorrectnessProofJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_signature_correctness_proof_json(self.pointer, $0)
                }
        )
    }

    public func getRevRegJson() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_rev_reg_json(self.pointer, $0)
                }
        )
    }

    public func getWitnessJson() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Credential_get_witness_json(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Credential_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeCredential: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Credential

    static func read(from buf: Reader) throws -> Credential {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Credential, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
        return Credential(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Credential) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol CredentialDefinitionProtocol {
    func getSchemaId() -> SchemaId
    func getSignatureType() -> SignatureType
    func getTag() -> String
    func getIssuerId() -> IssuerId
    func getJson() throws -> String
}

public class CredentialDefinition: CredentialDefinitionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_CredentialDefinition_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_CredentialDefinition_object_free(pointer, $0) }
    }

    public func getSchemaId() -> SchemaId {
        return try! FfiConverterTypeSchemaId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialDefinition_get_schema_id(self.pointer, $0)
                }
        )
    }

    public func getSignatureType() -> SignatureType {
        return try! FfiConverterTypeSignatureType.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialDefinition_get_signature_type(self.pointer, $0)
                }
        )
    }

    public func getTag() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialDefinition_get_tag(self.pointer, $0)
                }
        )
    }

    public func getIssuerId() -> IssuerId {
        return try! FfiConverterTypeIssuerId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialDefinition_get_issuer_id(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_CredentialDefinition_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeCredentialDefinition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialDefinition

    static func read(from buf: Reader) throws -> CredentialDefinition {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: CredentialDefinition, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinition {
        return CredentialDefinition(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: CredentialDefinition) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol CredentialDefinitionPrivateProtocol {
    func getJson() throws -> String
}

public class CredentialDefinitionPrivate: CredentialDefinitionPrivateProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_CredentialDefinitionPrivate_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_CredentialDefinitionPrivate_object_free(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_CredentialDefinitionPrivate_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeCredentialDefinitionPrivate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialDefinitionPrivate

    static func read(from buf: Reader) throws -> CredentialDefinitionPrivate {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: CredentialDefinitionPrivate, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinitionPrivate {
        return CredentialDefinitionPrivate(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: CredentialDefinitionPrivate) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol CredentialKeyCorrectnessProofProtocol {
    func getJson() throws -> String
}

public class CredentialKeyCorrectnessProof: CredentialKeyCorrectnessProofProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_CredentialKeyCorrectnessProof_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_CredentialKeyCorrectnessProof_object_free(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_CredentialKeyCorrectnessProof_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeCredentialKeyCorrectnessProof: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialKeyCorrectnessProof

    static func read(from buf: Reader) throws -> CredentialKeyCorrectnessProof {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: CredentialKeyCorrectnessProof, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialKeyCorrectnessProof {
        return CredentialKeyCorrectnessProof(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: CredentialKeyCorrectnessProof) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol CredentialOfferProtocol {
    func getSchemaId() -> SchemaId
    func getCredDefId() -> CredentialDefinitionId
    func getKeyCorrectnessProof() -> String
    func getNonce() -> Nonce
    func getMethodName() -> String?
    func getJson() throws -> String
}

public class CredentialOffer: CredentialOfferProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_CredentialOffer_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_CredentialOffer_object_free(pointer, $0) }
    }

    public func getSchemaId() -> SchemaId {
        return try! FfiConverterTypeSchemaId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialOffer_get_schema_id(self.pointer, $0)
                }
        )
    }

    public func getCredDefId() -> CredentialDefinitionId {
        return try! FfiConverterTypeCredentialDefinitionId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialOffer_get_cred_def_id(self.pointer, $0)
                }
        )
    }

    public func getKeyCorrectnessProof() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialOffer_get_key_correctness_proof(self.pointer, $0)
                }
        )
    }

    public func getNonce() -> Nonce {
        return try! FfiConverterTypeNonce.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialOffer_get_nonce(self.pointer, $0)
                }
        )
    }

    public func getMethodName() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialOffer_get_method_name(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_CredentialOffer_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeCredentialOffer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialOffer

    static func read(from buf: Reader) throws -> CredentialOffer {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: CredentialOffer, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialOffer {
        return CredentialOffer(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: CredentialOffer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol CredentialRequestProtocol {
    func getBlindedCredentialSecretsJson() -> String
    func getBlindedCredentialSecretsCorrectnessProofJson() -> String
    func getNonce() -> Nonce
    func getJson() throws -> String
}

public class CredentialRequest: CredentialRequestProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_CredentialRequest_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_CredentialRequest_object_free(pointer, $0) }
    }

    public func getBlindedCredentialSecretsJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialRequest_get_blinded_credential_secrets_json(self.pointer, $0)
                }
        )
    }

    public func getBlindedCredentialSecretsCorrectnessProofJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialRequest_get_blinded_credential_secrets_correctness_proof_json(self.pointer, $0)
                }
        )
    }

    public func getNonce() -> Nonce {
        return try! FfiConverterTypeNonce.lift(
            try!
                rustCall {
                    anoncreds_d8c0_CredentialRequest_get_nonce(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_CredentialRequest_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeCredentialRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialRequest

    static func read(from buf: Reader) throws -> CredentialRequest {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: CredentialRequest, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequest {
        return CredentialRequest(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: CredentialRequest) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol IssuerProtocol {
    func createSchema(schemaName: String, schemaVersion: String, issuerId: String, attrNames: [String]) throws -> Schema
    func createCredentialDefinition(schemaId: String, schema: Schema, issuerId: String, tag: String, signatureType: SignatureType, config: CredentialDefinitionConfig) throws -> IssuerCreateCredentialDefinitionReturn
    func createRevocationRegistryDef(credDef: CredentialDefinition, credDefId: String, issuerId: String, tag: String, revRegType: RegistryType, maxCredNum: UInt32) throws -> IssuerCreateRevocationRegistryDefReturn
    func createRevocationStatusList(revRegDefId: String, revRegDef: RevocationRegistryDefinition, issuerId: String, timestamp: UInt64?, issuanceByDefault: Bool) throws -> RevocationStatusList
    func updateRevocationStatusListTimestampOnly(timestamp: UInt64, currentList: RevocationStatusList) -> RevocationStatusList
    func updateRevocationStatusList(timestamp: UInt64?, issued: [UInt32]?, revoked: [UInt32]?, revRegDef: RevocationRegistryDefinition, currentList: RevocationStatusList) throws -> RevocationStatusList
    func createCredentialOffer(schemaId: String, credDefId: String, correctnessProof: CredentialKeyCorrectnessProof) throws -> CredentialOffer
    func createCredential(credDef: CredentialDefinition, credDefPrivate: CredentialDefinitionPrivate, credOffer: CredentialOffer, credRequest: CredentialRequest, credValues: [AttributeValues], revRegId: RevocationRegistryId?, revStatusList: RevocationStatusList?, revocationConfig: CredentialRevocationConfig?) throws -> Credential
}

public class Issuer: IssuerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                anoncreds_d8c0_Issuer_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_Issuer_object_free(pointer, $0) }
    }

    public func createSchema(schemaName: String, schemaVersion: String, issuerId: String, attrNames: [String]) throws -> Schema {
        return try FfiConverterTypeSchema.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_create_schema(self.pointer,
                                                        FfiConverterString.lower(schemaName),
                                                        FfiConverterString.lower(schemaVersion),
                                                        FfiConverterString.lower(issuerId),
                                                        FfiConverterSequenceString.lower(attrNames), $0)
                }
        )
    }

    public func createCredentialDefinition(schemaId: String, schema: Schema, issuerId: String, tag: String, signatureType: SignatureType, config: CredentialDefinitionConfig) throws -> IssuerCreateCredentialDefinitionReturn {
        return try FfiConverterTypeIssuerCreateCredentialDefinitionReturn.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_create_credential_definition(self.pointer,
                                                                       FfiConverterString.lower(schemaId),
                                                                       FfiConverterTypeSchema.lower(schema),
                                                                       FfiConverterString.lower(issuerId),
                                                                       FfiConverterString.lower(tag),
                                                                       FfiConverterTypeSignatureType.lower(signatureType),
                                                                       FfiConverterTypeCredentialDefinitionConfig.lower(config), $0)
                }
        )
    }

    public func createRevocationRegistryDef(credDef: CredentialDefinition, credDefId: String, issuerId: String, tag: String, revRegType: RegistryType, maxCredNum: UInt32) throws -> IssuerCreateRevocationRegistryDefReturn {
        return try FfiConverterTypeIssuerCreateRevocationRegistryDefReturn.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_create_revocation_registry_def(self.pointer,
                                                                         FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                         FfiConverterString.lower(credDefId),
                                                                         FfiConverterString.lower(issuerId),
                                                                         FfiConverterString.lower(tag),
                                                                         FfiConverterTypeRegistryType.lower(revRegType),
                                                                         FfiConverterUInt32.lower(maxCredNum), $0)
                }
        )
    }

    public func createRevocationStatusList(revRegDefId: String, revRegDef: RevocationRegistryDefinition, issuerId: String, timestamp: UInt64?, issuanceByDefault: Bool) throws -> RevocationStatusList {
        return try FfiConverterTypeRevocationStatusList.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_create_revocation_status_list(self.pointer,
                                                                        FfiConverterString.lower(revRegDefId),
                                                                        FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                        FfiConverterString.lower(issuerId),
                                                                        FfiConverterOptionUInt64.lower(timestamp),
                                                                        FfiConverterBool.lower(issuanceByDefault), $0)
                }
        )
    }

    public func updateRevocationStatusListTimestampOnly(timestamp: UInt64, currentList: RevocationStatusList) -> RevocationStatusList {
        return try! FfiConverterTypeRevocationStatusList.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Issuer_update_revocation_status_list_timestamp_only(self.pointer,
                                                                                       FfiConverterUInt64.lower(timestamp),
                                                                                       FfiConverterTypeRevocationStatusList.lower(currentList), $0)
                }
        )
    }

    public func updateRevocationStatusList(timestamp: UInt64?, issued: [UInt32]?, revoked: [UInt32]?, revRegDef: RevocationRegistryDefinition, currentList: RevocationStatusList) throws -> RevocationStatusList {
        return try FfiConverterTypeRevocationStatusList.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_update_revocation_status_list(self.pointer,
                                                                        FfiConverterOptionUInt64.lower(timestamp),
                                                                        FfiConverterOptionSequenceUInt32.lower(issued),
                                                                        FfiConverterOptionSequenceUInt32.lower(revoked),
                                                                        FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                        FfiConverterTypeRevocationStatusList.lower(currentList), $0)
                }
        )
    }

    public func createCredentialOffer(schemaId: String, credDefId: String, correctnessProof: CredentialKeyCorrectnessProof) throws -> CredentialOffer {
        return try FfiConverterTypeCredentialOffer.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_create_credential_offer(self.pointer,
                                                                  FfiConverterString.lower(schemaId),
                                                                  FfiConverterString.lower(credDefId),
                                                                  FfiConverterTypeCredentialKeyCorrectnessProof.lower(correctnessProof), $0)
                }
        )
    }

    public func createCredential(credDef: CredentialDefinition, credDefPrivate: CredentialDefinitionPrivate, credOffer: CredentialOffer, credRequest: CredentialRequest, credValues: [AttributeValues], revRegId: RevocationRegistryId?, revStatusList: RevocationStatusList?, revocationConfig: CredentialRevocationConfig?) throws -> Credential {
        return try FfiConverterTypeCredential.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Issuer_create_credential(self.pointer,
                                                            FfiConverterTypeCredentialDefinition.lower(credDef),
                                                            FfiConverterTypeCredentialDefinitionPrivate.lower(credDefPrivate),
                                                            FfiConverterTypeCredentialOffer.lower(credOffer),
                                                            FfiConverterTypeCredentialRequest.lower(credRequest),
                                                            FfiConverterSequenceTypeAttributeValues.lower(credValues),
                                                            FfiConverterOptionTypeRevocationRegistryId.lower(revRegId),
                                                            FfiConverterOptionTypeRevocationStatusList.lower(revStatusList),
                                                            FfiConverterOptionTypeCredentialRevocationConfig.lower(revocationConfig), $0)
                }
        )
    }
}

private struct FfiConverterTypeIssuer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Issuer

    static func read(from buf: Reader) throws -> Issuer {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Issuer, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Issuer {
        return Issuer(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Issuer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol LinkSecretProtocol {
    func getBigNumber() -> String
    func getJson() throws -> String
}

public class LinkSecret: LinkSecretProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                anoncreds_d8c0_LinkSecret_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_LinkSecret_object_free(pointer, $0) }
    }

    public static func newFromJson(jsonString: String) throws -> LinkSecret {
        return LinkSecret(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_LinkSecret_new_from_json(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    public func getBigNumber() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_LinkSecret_get_big_number(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_LinkSecret_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeLinkSecret: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LinkSecret

    static func read(from buf: Reader) throws -> LinkSecret {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: LinkSecret, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LinkSecret {
        return LinkSecret(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: LinkSecret) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol NonceProtocol {
    func getValue() throws -> String
}

public class Nonce: NonceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                anoncreds_d8c0_Nonce_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_Nonce_object_free(pointer, $0) }
    }

    public static func newFromValue(valueString: String) throws -> Nonce {
        return Nonce(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_Nonce_new_from_value(
                    FfiConverterString.lower(valueString), $0
                )
            })
    }

    public func getValue() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Nonce_get_value(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeNonce: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Nonce

    static func read(from buf: Reader) throws -> Nonce {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Nonce, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Nonce {
        return Nonce(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Nonce) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol ProverProtocol {
    func createCredentialRequest(entropy: String?, proverDid: String?, credDef: CredentialDefinition, linkSecret: LinkSecret, linkSecretId: String, credentialOffer: CredentialOffer) throws -> CreateCrendentialRequestResponse
    func processCredential(credential: Credential, credRequestMetadata: CredentialRequestMetadata, linkSecret: LinkSecret, credDef: CredentialDefinition, revRegDef: RevocationRegistryDefinition?) throws
    func createLinkSecret() -> LinkSecret
}

public class Prover: ProverProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                anoncreds_d8c0_Prover_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_Prover_object_free(pointer, $0) }
    }

    public func createCredentialRequest(entropy: String?, proverDid: String?, credDef: CredentialDefinition, linkSecret: LinkSecret, linkSecretId: String, credentialOffer: CredentialOffer) throws -> CreateCrendentialRequestResponse {
        return try FfiConverterTypeCreateCrendentialRequestResponse.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_Prover_create_credential_request(self.pointer,
                                                                    FfiConverterOptionString.lower(entropy),
                                                                    FfiConverterOptionString.lower(proverDid),
                                                                    FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                    FfiConverterTypeLinkSecret.lower(linkSecret),
                                                                    FfiConverterString.lower(linkSecretId),
                                                                    FfiConverterTypeCredentialOffer.lower(credentialOffer), $0)
                }
        )
    }

    public func processCredential(credential: Credential, credRequestMetadata: CredentialRequestMetadata, linkSecret: LinkSecret, credDef: CredentialDefinition, revRegDef: RevocationRegistryDefinition?) throws {
        try
            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_Prover_process_credential(self.pointer,
                                                         FfiConverterTypeCredential.lower(credential),
                                                         FfiConverterTypeCredentialRequestMetadata.lower(credRequestMetadata),
                                                         FfiConverterTypeLinkSecret.lower(linkSecret),
                                                         FfiConverterTypeCredentialDefinition.lower(credDef),
                                                         FfiConverterOptionTypeRevocationRegistryDefinition.lower(revRegDef), $0)
            }
    }

    public func createLinkSecret() -> LinkSecret {
        return try! FfiConverterTypeLinkSecret.lift(
            try!
                rustCall {
                    anoncreds_d8c0_Prover_create_link_secret(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeProver: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Prover

    static func read(from buf: Reader) throws -> Prover {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Prover, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Prover {
        return Prover(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Prover) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RevocationRegistryDefinitionProtocol {
    func getIssuerId() -> IssuerId
    func getTag() -> String
    func getCredDefId() -> CredentialDefinitionId
    func getValue() -> RevocationRegistryDefinitionValue
    func getJson() throws -> String
}

public class RevocationRegistryDefinition: RevocationRegistryDefinitionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_RevocationRegistryDefinition_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_RevocationRegistryDefinition_object_free(pointer, $0) }
    }

    public func getIssuerId() -> IssuerId {
        return try! FfiConverterTypeIssuerId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinition_get_issuer_id(self.pointer, $0)
                }
        )
    }

    public func getTag() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinition_get_tag(self.pointer, $0)
                }
        )
    }

    public func getCredDefId() -> CredentialDefinitionId {
        return try! FfiConverterTypeCredentialDefinitionId.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinition_get_cred_def_id(self.pointer, $0)
                }
        )
    }

    public func getValue() -> RevocationRegistryDefinitionValue {
        return try! FfiConverterTypeRevocationRegistryDefinitionValue.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinition_get_value(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_RevocationRegistryDefinition_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeRevocationRegistryDefinition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinition

    static func read(from buf: Reader) throws -> RevocationRegistryDefinition {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: RevocationRegistryDefinition, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinition {
        return RevocationRegistryDefinition(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: RevocationRegistryDefinition) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RevocationRegistryDefinitionPrivateProtocol {
    func getJson() throws -> String
}

public class RevocationRegistryDefinitionPrivate: RevocationRegistryDefinitionPrivateProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_RevocationRegistryDefinitionPrivate_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_RevocationRegistryDefinitionPrivate_object_free(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_RevocationRegistryDefinitionPrivate_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeRevocationRegistryDefinitionPrivate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionPrivate

    static func read(from buf: Reader) throws -> RevocationRegistryDefinitionPrivate {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: RevocationRegistryDefinitionPrivate, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionPrivate {
        return RevocationRegistryDefinitionPrivate(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: RevocationRegistryDefinitionPrivate) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RevocationRegistryDefinitionValueProtocol {
    func getMaxCredNum() -> UInt32
    func getTailsHash() -> String
    func getTailsLocation() -> String
    func getJson() throws -> String
}

public class RevocationRegistryDefinitionValue: RevocationRegistryDefinitionValueProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_RevocationRegistryDefinitionValue_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_RevocationRegistryDefinitionValue_object_free(pointer, $0) }
    }

    public func getMaxCredNum() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinitionValue_get_max_cred_num(self.pointer, $0)
                }
        )
    }

    public func getTailsHash() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinitionValue_get_tails_hash(self.pointer, $0)
                }
        )
    }

    public func getTailsLocation() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    anoncreds_d8c0_RevocationRegistryDefinitionValue_get_tails_location(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_RevocationRegistryDefinitionValue_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeRevocationRegistryDefinitionValue: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionValue

    static func read(from buf: Reader) throws -> RevocationRegistryDefinitionValue {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: RevocationRegistryDefinitionValue, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionValue {
        return RevocationRegistryDefinitionValue(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: RevocationRegistryDefinitionValue) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RevocationRegistryDefinitionValuePublicKeysProtocol {
    func getJson() throws -> String
}

public class RevocationRegistryDefinitionValuePublicKeys: RevocationRegistryDefinitionValuePublicKeysProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_RevocationRegistryDefinitionValuePublicKeys_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_RevocationRegistryDefinitionValuePublicKeys_object_free(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_RevocationRegistryDefinitionValuePublicKeys_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionValuePublicKeys

    static func read(from buf: Reader) throws -> RevocationRegistryDefinitionValuePublicKeys {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: RevocationRegistryDefinitionValuePublicKeys, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionValuePublicKeys {
        return RevocationRegistryDefinitionValuePublicKeys(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: RevocationRegistryDefinitionValuePublicKeys) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol RevocationStatusListProtocol {
    func getJson() throws -> String
}

public class RevocationStatusList: RevocationStatusListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                anoncreds_d8c0_RevocationStatusList_new(
                    FfiConverterString.lower(jsonString), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_anoncreds_d8c0_RevocationStatusList_object_free(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            try
                rustCallWithError(FfiConverterTypeAnoncredsError.self) {
                    anoncreds_d8c0_RevocationStatusList_get_json(self.pointer, $0)
                }
        )
    }
}

private struct FfiConverterTypeRevocationStatusList: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationStatusList

    static func read(from buf: Reader) throws -> RevocationStatusList {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: RevocationStatusList, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationStatusList {
        return RevocationStatusList(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: RevocationStatusList) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public struct AttributeValues {
    public var raw: String
    public var encoded: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(raw: String, encoded: String) {
        self.raw = raw
        self.encoded = encoded
    }
}

extension AttributeValues: Equatable, Hashable {
    public static func == (lhs: AttributeValues, rhs: AttributeValues) -> Bool {
        if lhs.raw != rhs.raw {
            return false
        }
        if lhs.encoded != rhs.encoded {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(raw)
        hasher.combine(encoded)
    }
}

private struct FfiConverterTypeAttributeValues: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> AttributeValues {
        return try AttributeValues(
            raw: FfiConverterString.read(from: buf),
            encoded: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: AttributeValues, into buf: Writer) {
        FfiConverterString.write(value.raw, into: buf)
        FfiConverterString.write(value.encoded, into: buf)
    }
}

public struct CreateCrendentialRequestResponse {
    public var request: CredentialRequest
    public var metadata: CredentialRequestMetadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(request: CredentialRequest, metadata: CredentialRequestMetadata) {
        self.request = request
        self.metadata = metadata
    }
}

private struct FfiConverterTypeCreateCrendentialRequestResponse: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CreateCrendentialRequestResponse {
        return try CreateCrendentialRequestResponse(
            request: FfiConverterTypeCredentialRequest.read(from: buf),
            metadata: FfiConverterTypeCredentialRequestMetadata.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CreateCrendentialRequestResponse, into buf: Writer) {
        FfiConverterTypeCredentialRequest.write(value.request, into: buf)
        FfiConverterTypeCredentialRequestMetadata.write(value.metadata, into: buf)
    }
}

public struct CredentialDefinitionConfig {
    public var supportRevocation: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(supportRevocation: Bool) {
        self.supportRevocation = supportRevocation
    }
}

extension CredentialDefinitionConfig: Equatable, Hashable {
    public static func == (lhs: CredentialDefinitionConfig, rhs: CredentialDefinitionConfig) -> Bool {
        if lhs.supportRevocation != rhs.supportRevocation {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(supportRevocation)
    }
}

private struct FfiConverterTypeCredentialDefinitionConfig: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CredentialDefinitionConfig {
        return try CredentialDefinitionConfig(
            supportRevocation: FfiConverterBool.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CredentialDefinitionConfig, into buf: Writer) {
        FfiConverterBool.write(value.supportRevocation, into: buf)
    }
}

public struct CredentialDefinitionData {
    public var primary: String
    public var revocation: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(primary: String, revocation: String?) {
        self.primary = primary
        self.revocation = revocation
    }
}

extension CredentialDefinitionData: Equatable, Hashable {
    public static func == (lhs: CredentialDefinitionData, rhs: CredentialDefinitionData) -> Bool {
        if lhs.primary != rhs.primary {
            return false
        }
        if lhs.revocation != rhs.revocation {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(primary)
        hasher.combine(revocation)
    }
}

private struct FfiConverterTypeCredentialDefinitionData: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CredentialDefinitionData {
        return try CredentialDefinitionData(
            primary: FfiConverterString.read(from: buf),
            revocation: FfiConverterOptionString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CredentialDefinitionData, into buf: Writer) {
        FfiConverterString.write(value.primary, into: buf)
        FfiConverterOptionString.write(value.revocation, into: buf)
    }
}

public struct CredentialRequestMetadata {
    public var linkSecretBlindingData: String
    public var nonce: Nonce
    public var linkSecretName: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(linkSecretBlindingData: String, nonce: Nonce, linkSecretName: String) {
        self.linkSecretBlindingData = linkSecretBlindingData
        self.nonce = nonce
        self.linkSecretName = linkSecretName
    }
}

private struct FfiConverterTypeCredentialRequestMetadata: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CredentialRequestMetadata {
        return try CredentialRequestMetadata(
            linkSecretBlindingData: FfiConverterString.read(from: buf),
            nonce: FfiConverterTypeNonce.read(from: buf),
            linkSecretName: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CredentialRequestMetadata, into buf: Writer) {
        FfiConverterString.write(value.linkSecretBlindingData, into: buf)
        FfiConverterTypeNonce.write(value.nonce, into: buf)
        FfiConverterString.write(value.linkSecretName, into: buf)
    }
}

public struct CredentialRevocationConfig {
    public var regDef: RevocationRegistryDefinition
    public var regDefPrivate: RevocationRegistryDefinitionPrivate
    public var registryIdx: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(regDef: RevocationRegistryDefinition, regDefPrivate: RevocationRegistryDefinitionPrivate, registryIdx: UInt32) {
        self.regDef = regDef
        self.regDefPrivate = regDefPrivate
        self.registryIdx = registryIdx
    }
}

private struct FfiConverterTypeCredentialRevocationConfig: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CredentialRevocationConfig {
        return try CredentialRevocationConfig(
            regDef: FfiConverterTypeRevocationRegistryDefinition.read(from: buf),
            regDefPrivate: FfiConverterTypeRevocationRegistryDefinitionPrivate.read(from: buf),
            registryIdx: FfiConverterUInt32.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CredentialRevocationConfig, into buf: Writer) {
        FfiConverterTypeRevocationRegistryDefinition.write(value.regDef, into: buf)
        FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.regDefPrivate, into: buf)
        FfiConverterUInt32.write(value.registryIdx, into: buf)
    }
}

public struct CredentialValues {
    public var values: [String: AttributeValues]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(values: [String: AttributeValues]) {
        self.values = values
    }
}

extension CredentialValues: Equatable, Hashable {
    public static func == (lhs: CredentialValues, rhs: CredentialValues) -> Bool {
        if lhs.values != rhs.values {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(values)
    }
}

private struct FfiConverterTypeCredentialValues: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CredentialValues {
        return try CredentialValues(
            values: FfiConverterDictionaryStringAttributeValues.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CredentialValues, into buf: Writer) {
        FfiConverterDictionaryStringAttributeValues.write(value.values, into: buf)
    }
}

public struct IssuerCreateCredentialDefinitionReturn {
    public var credentialDefinition: CredentialDefinition
    public var credentialDefinitionPrivate: CredentialDefinitionPrivate
    public var credentialKeyCorrectnessProof: CredentialKeyCorrectnessProof

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credentialDefinition: CredentialDefinition, credentialDefinitionPrivate: CredentialDefinitionPrivate, credentialKeyCorrectnessProof: CredentialKeyCorrectnessProof) {
        self.credentialDefinition = credentialDefinition
        self.credentialDefinitionPrivate = credentialDefinitionPrivate
        self.credentialKeyCorrectnessProof = credentialKeyCorrectnessProof
    }
}

private struct FfiConverterTypeIssuerCreateCredentialDefinitionReturn: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> IssuerCreateCredentialDefinitionReturn {
        return try IssuerCreateCredentialDefinitionReturn(
            credentialDefinition: FfiConverterTypeCredentialDefinition.read(from: buf),
            credentialDefinitionPrivate: FfiConverterTypeCredentialDefinitionPrivate.read(from: buf),
            credentialKeyCorrectnessProof: FfiConverterTypeCredentialKeyCorrectnessProof.read(from: buf)
        )
    }

    fileprivate static func write(_ value: IssuerCreateCredentialDefinitionReturn, into buf: Writer) {
        FfiConverterTypeCredentialDefinition.write(value.credentialDefinition, into: buf)
        FfiConverterTypeCredentialDefinitionPrivate.write(value.credentialDefinitionPrivate, into: buf)
        FfiConverterTypeCredentialKeyCorrectnessProof.write(value.credentialKeyCorrectnessProof, into: buf)
    }
}

public struct IssuerCreateRevocationRegistryDefReturn {
    public var regDef: RevocationRegistryDefinition
    public var regDefPrivate: RevocationRegistryDefinitionPrivate

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(regDef: RevocationRegistryDefinition, regDefPrivate: RevocationRegistryDefinitionPrivate) {
        self.regDef = regDef
        self.regDefPrivate = regDefPrivate
    }
}

private struct FfiConverterTypeIssuerCreateRevocationRegistryDefReturn: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> IssuerCreateRevocationRegistryDefReturn {
        return try IssuerCreateRevocationRegistryDefReturn(
            regDef: FfiConverterTypeRevocationRegistryDefinition.read(from: buf),
            regDefPrivate: FfiConverterTypeRevocationRegistryDefinitionPrivate.read(from: buf)
        )
    }

    fileprivate static func write(_ value: IssuerCreateRevocationRegistryDefReturn, into buf: Writer) {
        FfiConverterTypeRevocationRegistryDefinition.write(value.regDef, into: buf)
        FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.regDefPrivate, into: buf)
    }
}

public struct Schema {
    public var name: String
    public var version: String
    public var attrNames: AttributeNames
    public var issuerId: IssuerId

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, version: String, attrNames: AttributeNames, issuerId: IssuerId) {
        self.name = name
        self.version = version
        self.attrNames = attrNames
        self.issuerId = issuerId
    }
}

extension Schema: Equatable, Hashable {
    public static func == (lhs: Schema, rhs: Schema) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.attrNames != rhs.attrNames {
            return false
        }
        if lhs.issuerId != rhs.issuerId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(version)
        hasher.combine(attrNames)
        hasher.combine(issuerId)
    }
}

private struct FfiConverterTypeSchema: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Schema {
        return try Schema(
            name: FfiConverterString.read(from: buf),
            version: FfiConverterString.read(from: buf),
            attrNames: FfiConverterTypeAttributeNames.read(from: buf),
            issuerId: FfiConverterTypeIssuerId.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Schema, into buf: Writer) {
        FfiConverterString.write(value.name, into: buf)
        FfiConverterString.write(value.version, into: buf)
        FfiConverterTypeAttributeNames.write(value.attrNames, into: buf)
        FfiConverterTypeIssuerId.write(value.issuerId, into: buf)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RegistryType {
    case clAccum
}

private struct FfiConverterTypeRegistryType: FfiConverterRustBuffer {
    typealias SwiftType = RegistryType

    static func read(from buf: Reader) throws -> RegistryType {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .clAccum

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: RegistryType, into buf: Writer) {
        switch value {
        case .clAccum:
            buf.writeInt(Int32(1))
        }
    }
}

extension RegistryType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SignatureType {
    case cl
}

private struct FfiConverterTypeSignatureType: FfiConverterRustBuffer {
    typealias SwiftType = SignatureType

    static func read(from buf: Reader) throws -> SignatureType {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .cl

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: SignatureType, into buf: Writer) {
        switch value {
        case .cl:
            buf.writeInt(Int32(1))
        }
    }
}

extension SignatureType: Equatable, Hashable {}

public enum AnoncredsError {
    // Simple error enums only carry a message
    case ConversionError(message: String)

    // Simple error enums only carry a message
    case SomethingWentWrong(message: String)

    // Simple error enums only carry a message
    case CreateCrentialRequestError(message: String)

    // Simple error enums only carry a message
    case CreateSchemaError(message: String)

    // Simple error enums only carry a message
    case CreateCredentialDefinition(message: String)

    // Simple error enums only carry a message
    case CreateRevocationRegistryDef(message: String)

    // Simple error enums only carry a message
    case CreateRevocationStatusList(message: String)

    // Simple error enums only carry a message
    case UpdateRevocationStatusList(message: String)

    // Simple error enums only carry a message
    case CreateCredentialOffer(message: String)

    // Simple error enums only carry a message
    case CreateCredential(message: String)

    // Simple error enums only carry a message
    case ProcessCredential(message: String)
}

private struct FfiConverterTypeAnoncredsError: FfiConverterRustBuffer {
    typealias SwiftType = AnoncredsError

    static func read(from buf: Reader) throws -> AnoncredsError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .ConversionError(
                message: try FfiConverterString.read(from: buf)
            )

        case 2: return .SomethingWentWrong(
                message: try FfiConverterString.read(from: buf)
            )

        case 3: return .CreateCrentialRequestError(
                message: try FfiConverterString.read(from: buf)
            )

        case 4: return .CreateSchemaError(
                message: try FfiConverterString.read(from: buf)
            )

        case 5: return .CreateCredentialDefinition(
                message: try FfiConverterString.read(from: buf)
            )

        case 6: return .CreateRevocationRegistryDef(
                message: try FfiConverterString.read(from: buf)
            )

        case 7: return .CreateRevocationStatusList(
                message: try FfiConverterString.read(from: buf)
            )

        case 8: return .UpdateRevocationStatusList(
                message: try FfiConverterString.read(from: buf)
            )

        case 9: return .CreateCredentialOffer(
                message: try FfiConverterString.read(from: buf)
            )

        case 10: return .CreateCredential(
                message: try FfiConverterString.read(from: buf)
            )

        case 11: return .ProcessCredential(
                message: try FfiConverterString.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: AnoncredsError, into buf: Writer) {
        switch value {
        case let .ConversionError(message):
            buf.writeInt(Int32(1))
            FfiConverterString.write(message, into: buf)
        case let .SomethingWentWrong(message):
            buf.writeInt(Int32(2))
            FfiConverterString.write(message, into: buf)
        case let .CreateCrentialRequestError(message):
            buf.writeInt(Int32(3))
            FfiConverterString.write(message, into: buf)
        case let .CreateSchemaError(message):
            buf.writeInt(Int32(4))
            FfiConverterString.write(message, into: buf)
        case let .CreateCredentialDefinition(message):
            buf.writeInt(Int32(5))
            FfiConverterString.write(message, into: buf)
        case let .CreateRevocationRegistryDef(message):
            buf.writeInt(Int32(6))
            FfiConverterString.write(message, into: buf)
        case let .CreateRevocationStatusList(message):
            buf.writeInt(Int32(7))
            FfiConverterString.write(message, into: buf)
        case let .UpdateRevocationStatusList(message):
            buf.writeInt(Int32(8))
            FfiConverterString.write(message, into: buf)
        case let .CreateCredentialOffer(message):
            buf.writeInt(Int32(9))
            FfiConverterString.write(message, into: buf)
        case let .CreateCredential(message):
            buf.writeInt(Int32(10))
            FfiConverterString.write(message, into: buf)
        case let .ProcessCredential(message):
            buf.writeInt(Int32(11))
            FfiConverterString.write(message, into: buf)
        }
    }
}

extension AnoncredsError: Equatable, Hashable {}

extension AnoncredsError: Error {}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt64.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterString.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRevocationRegistryDefinition: FfiConverterRustBuffer {
    typealias SwiftType = RevocationRegistryDefinition?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeRevocationRegistryDefinition.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationRegistryDefinition.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRevocationStatusList: FfiConverterRustBuffer {
    typealias SwiftType = RevocationStatusList?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeRevocationStatusList.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationStatusList.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeCredentialRevocationConfig: FfiConverterRustBuffer {
    typealias SwiftType = CredentialRevocationConfig?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeCredentialRevocationConfig.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCredentialRevocationConfig.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterSequenceUInt32.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt32.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRevocationRegistryId: FfiConverterRustBuffer {
    typealias SwiftType = RevocationRegistryId?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeRevocationRegistryId.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationRegistryId.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]

    static func write(_ value: [UInt32], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterUInt32.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [UInt32] {
        let len: Int32 = try buf.readInt()
        var seq = [UInt32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt32.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    static func write(_ value: [String], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterString.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [String] {
        let len: Int32 = try buf.readInt()
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAttributeValues: FfiConverterRustBuffer {
    typealias SwiftType = [AttributeValues]

    static func write(_ value: [AttributeValues], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeAttributeValues.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [AttributeValues] {
        let len: Int32 = try buf.readInt()
        var seq = [AttributeValues]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAttributeValues.read(from: buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringAttributeValues: FfiConverterRustBuffer {
    fileprivate static func write(_ value: [String: AttributeValues], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for (key, value) in value {
            FfiConverterString.write(key, into: buf)
            FfiConverterTypeAttributeValues.write(value, into: buf)
        }
    }

    fileprivate static func read(from buf: Reader) throws -> [String: AttributeValues] {
        let len: Int32 = try buf.readInt()
        var dict = [String: AttributeValues]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: buf)
            let value = try FfiConverterTypeAttributeValues.read(from: buf)
            dict[key] = value
        }
        return dict
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AttributeNames = [String]
private typealias FfiConverterTypeAttributeNames = FfiConverterSequenceString

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias CredentialDefinitionId = String
private typealias FfiConverterTypeCredentialDefinitionId = FfiConverterString

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias IssuerId = String
private typealias FfiConverterTypeIssuerId = FfiConverterString

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RevocationRegistryDefinitionId = String
private typealias FfiConverterTypeRevocationRegistryDefinitionId = FfiConverterString

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RevocationRegistryId = String
private typealias FfiConverterTypeRevocationRegistryId = FfiConverterString

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SchemaId = String
private typealias FfiConverterTypeSchemaId = FfiConverterString

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum AnoncredsLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {}
}
