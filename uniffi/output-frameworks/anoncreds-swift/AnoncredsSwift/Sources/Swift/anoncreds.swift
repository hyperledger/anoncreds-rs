// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(anoncredsFFI)
    import anoncredsFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_anoncreds_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_anoncreds_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol CredentialProtocol {
    func getSchemaId() -> SchemaId
    func getCredDefId() -> CredentialDefinitionId
    func getRevRegId() -> RevocationRegistryId?
    func getValues() -> CredentialValues
    func getSignatureJson() -> String
    func getSignatureCorrectnessProofJson() -> String
    func getRevRegJson() -> String?
    func getWitnessJson() -> String?
    func getJson() throws -> String
}

public class Credential: CredentialProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_credential_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_credential(pointer, $0) }
    }

    public func getSchemaId() -> SchemaId {
        return try! FfiConverterTypeSchemaId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_schema_id(self.pointer, $0)
                }
        )
    }

    public func getCredDefId() -> CredentialDefinitionId {
        return try! FfiConverterTypeCredentialDefinitionId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_cred_def_id(self.pointer, $0)
                }
        )
    }

    public func getRevRegId() -> RevocationRegistryId? {
        return try! FfiConverterOptionTypeRevocationRegistryId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_rev_reg_id(self.pointer, $0)
                }
        )
    }

    public func getValues() -> CredentialValues {
        return try! FfiConverterTypeCredentialValues.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_values(self.pointer, $0)
                }
        )
    }

    public func getSignatureJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_signature_json(self.pointer, $0)
                }
        )
    }

    public func getSignatureCorrectnessProofJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_signature_correctness_proof_json(self.pointer, $0)
                }
        )
    }

    public func getRevRegJson() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_rev_reg_json(self.pointer, $0)
                }
        )
    }

    public func getWitnessJson() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credential_get_witness_json(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_credential_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeCredential: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Credential

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Credential {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Credential, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
        return Credential(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Credential) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeCredential_lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
    return try FfiConverterTypeCredential.lift(pointer)
}

public func FfiConverterTypeCredential_lower(_ value: Credential) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredential.lower(value)
}

public protocol CredentialDefinitionProtocol {
    func getSchemaId() -> SchemaId
    func getSignatureType() -> SignatureType
    func getTag() -> String
    func getIssuerId() -> IssuerId
    func getJson() throws -> String
}

public class CredentialDefinition: CredentialDefinitionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_credentialdefinition_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_credentialdefinition(pointer, $0) }
    }

    public func getSchemaId() -> SchemaId {
        return try! FfiConverterTypeSchemaId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialdefinition_get_schema_id(self.pointer, $0)
                }
        )
    }

    public func getSignatureType() -> SignatureType {
        return try! FfiConverterTypeSignatureType.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialdefinition_get_signature_type(self.pointer, $0)
                }
        )
    }

    public func getTag() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialdefinition_get_tag(self.pointer, $0)
                }
        )
    }

    public func getIssuerId() -> IssuerId {
        return try! FfiConverterTypeIssuerId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialdefinition_get_issuer_id(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_credentialdefinition_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeCredentialDefinition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialDefinition

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialDefinition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinition {
        return CredentialDefinition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialDefinition) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeCredentialDefinition_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinition {
    return try FfiConverterTypeCredentialDefinition.lift(pointer)
}

public func FfiConverterTypeCredentialDefinition_lower(_ value: CredentialDefinition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialDefinition.lower(value)
}

public protocol CredentialDefinitionPrivateProtocol {
    func getJson() throws -> String
}

public class CredentialDefinitionPrivate: CredentialDefinitionPrivateProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_credentialdefinitionprivate_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_credentialdefinitionprivate(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_credentialdefinitionprivate_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeCredentialDefinitionPrivate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialDefinitionPrivate

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinitionPrivate {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialDefinitionPrivate, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinitionPrivate {
        return CredentialDefinitionPrivate(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialDefinitionPrivate) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeCredentialDefinitionPrivate_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialDefinitionPrivate {
    return try FfiConverterTypeCredentialDefinitionPrivate.lift(pointer)
}

public func FfiConverterTypeCredentialDefinitionPrivate_lower(_ value: CredentialDefinitionPrivate) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialDefinitionPrivate.lower(value)
}

public protocol CredentialKeyCorrectnessProofProtocol {
    func getJson() throws -> String
}

public class CredentialKeyCorrectnessProof: CredentialKeyCorrectnessProofProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_credentialkeycorrectnessproof_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_credentialkeycorrectnessproof(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_credentialkeycorrectnessproof_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeCredentialKeyCorrectnessProof: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialKeyCorrectnessProof

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialKeyCorrectnessProof {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialKeyCorrectnessProof, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialKeyCorrectnessProof {
        return CredentialKeyCorrectnessProof(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialKeyCorrectnessProof) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeCredentialKeyCorrectnessProof_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialKeyCorrectnessProof {
    return try FfiConverterTypeCredentialKeyCorrectnessProof.lift(pointer)
}

public func FfiConverterTypeCredentialKeyCorrectnessProof_lower(_ value: CredentialKeyCorrectnessProof) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialKeyCorrectnessProof.lower(value)
}

public protocol CredentialOfferProtocol {
    func getSchemaId() -> SchemaId
    func getCredDefId() -> CredentialDefinitionId
    func getKeyCorrectnessProof() -> String
    func getNonce() -> Nonce
    func getMethodName() -> String?
    func getJson() throws -> String
}

public class CredentialOffer: CredentialOfferProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_credentialoffer_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_credentialoffer(pointer, $0) }
    }

    public func getSchemaId() -> SchemaId {
        return try! FfiConverterTypeSchemaId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialoffer_get_schema_id(self.pointer, $0)
                }
        )
    }

    public func getCredDefId() -> CredentialDefinitionId {
        return try! FfiConverterTypeCredentialDefinitionId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialoffer_get_cred_def_id(self.pointer, $0)
                }
        )
    }

    public func getKeyCorrectnessProof() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialoffer_get_key_correctness_proof(self.pointer, $0)
                }
        )
    }

    public func getNonce() -> Nonce {
        return try! FfiConverterTypeNonce.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialoffer_get_nonce(self.pointer, $0)
                }
        )
    }

    public func getMethodName() -> String? {
        return try! FfiConverterOptionString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialoffer_get_method_name(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_credentialoffer_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeCredentialOffer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialOffer

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialOffer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialOffer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialOffer {
        return CredentialOffer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialOffer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeCredentialOffer_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialOffer {
    return try FfiConverterTypeCredentialOffer.lift(pointer)
}

public func FfiConverterTypeCredentialOffer_lower(_ value: CredentialOffer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialOffer.lower(value)
}

public protocol CredentialRequestProtocol {
    func getBlindedCredentialSecretsJson() -> String
    func getBlindedCredentialSecretsCorrectnessProofJson() -> String
    func getNonce() -> Nonce
    func getJson() throws -> String
}

public class CredentialRequest: CredentialRequestProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_credentialrequest_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_credentialrequest(pointer, $0) }
    }

    public func getBlindedCredentialSecretsJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialrequest_get_blinded_credential_secrets_json(self.pointer, $0)
                }
        )
    }

    public func getBlindedCredentialSecretsCorrectnessProofJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialrequest_get_blinded_credential_secrets_correctness_proof_json(self.pointer, $0)
                }
        )
    }

    public func getNonce() -> Nonce {
        return try! FfiConverterTypeNonce.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_credentialrequest_get_nonce(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_credentialrequest_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeCredentialRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CredentialRequest

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CredentialRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequest {
        return CredentialRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CredentialRequest) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeCredentialRequest_lift(_ pointer: UnsafeMutableRawPointer) throws -> CredentialRequest {
    return try FfiConverterTypeCredentialRequest.lift(pointer)
}

public func FfiConverterTypeCredentialRequest_lower(_ value: CredentialRequest) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredentialRequest.lower(value)
}

public protocol IssuerProtocol {
    func createSchema(schemaName: String, schemaVersion: String, issuerId: String, attrNames: [String]) throws -> Schema
    func createCredentialDefinition(schemaId: String, schema: Schema, issuerId: String, tag: String, signatureType: SignatureType, config: CredentialDefinitionConfig) throws -> IssuerCreateCredentialDefinitionReturn
    func createRevocationRegistryDef(credDef: CredentialDefinition, credDefId: String, issuerId: String, tag: String, revRegType: RegistryType, maxCredNum: UInt32) throws -> IssuerCreateRevocationRegistryDefReturn
    func createRevocationStatusList(revRegDefId: String, revRegDef: RevocationRegistryDefinition, issuerId: String, timestamp: UInt64?, issuanceByDefault: Bool) throws -> RevocationStatusList
    func updateRevocationStatusListTimestampOnly(timestamp: UInt64, currentList: RevocationStatusList) -> RevocationStatusList
    func updateRevocationStatusList(timestamp: UInt64?, issued: [UInt32]?, revoked: [UInt32]?, revRegDef: RevocationRegistryDefinition, currentList: RevocationStatusList) throws -> RevocationStatusList
    func createCredentialOffer(schemaId: String, credDefId: String, correctnessProof: CredentialKeyCorrectnessProof) throws -> CredentialOffer
    func createCredential(credDef: CredentialDefinition, credDefPrivate: CredentialDefinitionPrivate, credOffer: CredentialOffer, credRequest: CredentialRequest, credValues: [AttributeValues], revRegId: RevocationRegistryId?, revStatusList: RevocationStatusList?, revocationConfig: CredentialRevocationConfig?) throws -> Credential
}

public class Issuer: IssuerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_anoncreds_fn_constructor_issuer_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_issuer(pointer, $0) }
    }

    public func createSchema(schemaName: String, schemaVersion: String, issuerId: String, attrNames: [String]) throws -> Schema {
        return try FfiConverterTypeSchema.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_create_schema(self.pointer,
                                                                FfiConverterString.lower(schemaName),
                                                                FfiConverterString.lower(schemaVersion),
                                                                FfiConverterString.lower(issuerId),
                                                                FfiConverterSequenceString.lower(attrNames), $0)
            }
        )
    }

    public func createCredentialDefinition(schemaId: String, schema: Schema, issuerId: String, tag: String, signatureType: SignatureType, config: CredentialDefinitionConfig) throws -> IssuerCreateCredentialDefinitionReturn {
        return try FfiConverterTypeIssuerCreateCredentialDefinitionReturn.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_create_credential_definition(self.pointer,
                                                                               FfiConverterString.lower(schemaId),
                                                                               FfiConverterTypeSchema.lower(schema),
                                                                               FfiConverterString.lower(issuerId),
                                                                               FfiConverterString.lower(tag),
                                                                               FfiConverterTypeSignatureType.lower(signatureType),
                                                                               FfiConverterTypeCredentialDefinitionConfig.lower(config), $0)
            }
        )
    }

    public func createRevocationRegistryDef(credDef: CredentialDefinition, credDefId: String, issuerId: String, tag: String, revRegType: RegistryType, maxCredNum: UInt32) throws -> IssuerCreateRevocationRegistryDefReturn {
        return try FfiConverterTypeIssuerCreateRevocationRegistryDefReturn.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_create_revocation_registry_def(self.pointer,
                                                                                 FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                                 FfiConverterString.lower(credDefId),
                                                                                 FfiConverterString.lower(issuerId),
                                                                                 FfiConverterString.lower(tag),
                                                                                 FfiConverterTypeRegistryType.lower(revRegType),
                                                                                 FfiConverterUInt32.lower(maxCredNum), $0)
            }
        )
    }

    public func createRevocationStatusList(revRegDefId: String, revRegDef: RevocationRegistryDefinition, issuerId: String, timestamp: UInt64?, issuanceByDefault: Bool) throws -> RevocationStatusList {
        return try FfiConverterTypeRevocationStatusList.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_create_revocation_status_list(self.pointer,
                                                                                FfiConverterString.lower(revRegDefId),
                                                                                FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                                FfiConverterString.lower(issuerId),
                                                                                FfiConverterOptionUInt64.lower(timestamp),
                                                                                FfiConverterBool.lower(issuanceByDefault), $0)
            }
        )
    }

    public func updateRevocationStatusListTimestampOnly(timestamp: UInt64, currentList: RevocationStatusList) -> RevocationStatusList {
        return try! FfiConverterTypeRevocationStatusList.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_issuer_update_revocation_status_list_timestamp_only(self.pointer,
                                                                                                   FfiConverterUInt64.lower(timestamp),
                                                                                                   FfiConverterTypeRevocationStatusList.lower(currentList), $0)
                }
        )
    }

    public func updateRevocationStatusList(timestamp: UInt64?, issued: [UInt32]?, revoked: [UInt32]?, revRegDef: RevocationRegistryDefinition, currentList: RevocationStatusList) throws -> RevocationStatusList {
        return try FfiConverterTypeRevocationStatusList.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_update_revocation_status_list(self.pointer,
                                                                                FfiConverterOptionUInt64.lower(timestamp),
                                                                                FfiConverterOptionSequenceUInt32.lower(issued),
                                                                                FfiConverterOptionSequenceUInt32.lower(revoked),
                                                                                FfiConverterTypeRevocationRegistryDefinition.lower(revRegDef),
                                                                                FfiConverterTypeRevocationStatusList.lower(currentList), $0)
            }
        )
    }

    public func createCredentialOffer(schemaId: String, credDefId: String, correctnessProof: CredentialKeyCorrectnessProof) throws -> CredentialOffer {
        return try FfiConverterTypeCredentialOffer.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_create_credential_offer(self.pointer,
                                                                          FfiConverterString.lower(schemaId),
                                                                          FfiConverterString.lower(credDefId),
                                                                          FfiConverterTypeCredentialKeyCorrectnessProof.lower(correctnessProof), $0)
            }
        )
    }

    public func createCredential(credDef: CredentialDefinition, credDefPrivate: CredentialDefinitionPrivate, credOffer: CredentialOffer, credRequest: CredentialRequest, credValues: [AttributeValues], revRegId: RevocationRegistryId?, revStatusList: RevocationStatusList?, revocationConfig: CredentialRevocationConfig?) throws -> Credential {
        return try FfiConverterTypeCredential.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_issuer_create_credential(self.pointer,
                                                                    FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                    FfiConverterTypeCredentialDefinitionPrivate.lower(credDefPrivate),
                                                                    FfiConverterTypeCredentialOffer.lower(credOffer),
                                                                    FfiConverterTypeCredentialRequest.lower(credRequest),
                                                                    FfiConverterSequenceTypeAttributeValues.lower(credValues),
                                                                    FfiConverterOptionTypeRevocationRegistryId.lower(revRegId),
                                                                    FfiConverterOptionTypeRevocationStatusList.lower(revStatusList),
                                                                    FfiConverterOptionTypeCredentialRevocationConfig.lower(revocationConfig), $0)
            }
        )
    }
}

public struct FfiConverterTypeIssuer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Issuer

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Issuer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Issuer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Issuer {
        return Issuer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Issuer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIssuer_lift(_ pointer: UnsafeMutableRawPointer) throws -> Issuer {
    return try FfiConverterTypeIssuer.lift(pointer)
}

public func FfiConverterTypeIssuer_lower(_ value: Issuer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIssuer.lower(value)
}

public protocol LinkSecretProtocol {
    func getBigNumber() -> String
    func getValue() throws -> String
}

public class LinkSecret: LinkSecretProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_anoncreds_fn_constructor_linksecret_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_linksecret(pointer, $0) }
    }

    public static func newFromValue(valueString: String) throws -> LinkSecret {
        return try LinkSecret(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_linksecret_new_from_value(
                FfiConverterString.lower(valueString), $0
            )
        })
    }

    public func getBigNumber() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_linksecret_get_big_number(self.pointer, $0)
                }
        )
    }

    public func getValue() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_linksecret_get_value(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeLinkSecret: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LinkSecret

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LinkSecret {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LinkSecret, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LinkSecret {
        return LinkSecret(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LinkSecret) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeLinkSecret_lift(_ pointer: UnsafeMutableRawPointer) throws -> LinkSecret {
    return try FfiConverterTypeLinkSecret.lift(pointer)
}

public func FfiConverterTypeLinkSecret_lower(_ value: LinkSecret) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLinkSecret.lower(value)
}

public protocol NonceProtocol {
    func getValue() throws -> String
}

public class Nonce: NonceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_anoncreds_fn_constructor_nonce_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_nonce(pointer, $0) }
    }

    public static func newFromValue(valueString: String) throws -> Nonce {
        return try Nonce(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_nonce_new_from_value(
                FfiConverterString.lower(valueString), $0
            )
        })
    }

    public func getValue() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_nonce_get_value(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeNonce: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Nonce

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Nonce {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Nonce, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Nonce {
        return Nonce(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Nonce) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeNonce_lift(_ pointer: UnsafeMutableRawPointer) throws -> Nonce {
    return try FfiConverterTypeNonce.lift(pointer)
}

public func FfiConverterTypeNonce_lower(_ value: Nonce) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNonce.lower(value)
}

public protocol ProverProtocol {
    func createCredentialRequest(entropy: String?, proverDid: String?, credDef: CredentialDefinition, linkSecret: LinkSecret, linkSecretId: String, credentialOffer: CredentialOffer) throws -> CreateCrendentialRequestResponse
    func processCredential(credential: Credential, credRequestMetadata: CredentialRequestMetadata, linkSecret: LinkSecret, credDef: CredentialDefinition, revRegDef: RevocationRegistryDefinition?) throws
    func createLinkSecret() -> LinkSecret
}

public class Prover: ProverProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_anoncreds_fn_constructor_prover_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_prover(pointer, $0) }
    }

    public func createCredentialRequest(entropy: String?, proverDid: String?, credDef: CredentialDefinition, linkSecret: LinkSecret, linkSecretId: String, credentialOffer: CredentialOffer) throws -> CreateCrendentialRequestResponse {
        return try FfiConverterTypeCreateCrendentialRequestResponse.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_prover_create_credential_request(self.pointer,
                                                                            FfiConverterOptionString.lower(entropy),
                                                                            FfiConverterOptionString.lower(proverDid),
                                                                            FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                            FfiConverterTypeLinkSecret.lower(linkSecret),
                                                                            FfiConverterString.lower(linkSecretId),
                                                                            FfiConverterTypeCredentialOffer.lower(credentialOffer), $0)
            }
        )
    }

    public func processCredential(credential: Credential, credRequestMetadata: CredentialRequestMetadata, linkSecret: LinkSecret, credDef: CredentialDefinition, revRegDef: RevocationRegistryDefinition?) throws {
        try
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_prover_process_credential(self.pointer,
                                                                     FfiConverterTypeCredential.lower(credential),
                                                                     FfiConverterTypeCredentialRequestMetadata.lower(credRequestMetadata),
                                                                     FfiConverterTypeLinkSecret.lower(linkSecret),
                                                                     FfiConverterTypeCredentialDefinition.lower(credDef),
                                                                     FfiConverterOptionTypeRevocationRegistryDefinition.lower(revRegDef), $0)
            }
    }

    public func createLinkSecret() -> LinkSecret {
        return try! FfiConverterTypeLinkSecret.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_prover_create_link_secret(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeProver: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Prover

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Prover {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Prover, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Prover {
        return Prover(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Prover) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeProver_lift(_ pointer: UnsafeMutableRawPointer) throws -> Prover {
    return try FfiConverterTypeProver.lift(pointer)
}

public func FfiConverterTypeProver_lower(_ value: Prover) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProver.lower(value)
}

public protocol RevocationRegistryDefinitionProtocol {
    func getIssuerId() -> IssuerId
    func getTag() -> String
    func getCredDefId() -> CredentialDefinitionId
    func getValue() -> RevocationRegistryDefinitionValue
    func getJson() throws -> String
}

public class RevocationRegistryDefinition: RevocationRegistryDefinitionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_revocationregistrydefinition_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_revocationregistrydefinition(pointer, $0) }
    }

    public func getIssuerId() -> IssuerId {
        return try! FfiConverterTypeIssuerId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinition_get_issuer_id(self.pointer, $0)
                }
        )
    }

    public func getTag() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinition_get_tag(self.pointer, $0)
                }
        )
    }

    public func getCredDefId() -> CredentialDefinitionId {
        return try! FfiConverterTypeCredentialDefinitionId.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinition_get_cred_def_id(self.pointer, $0)
                }
        )
    }

    public func getValue() -> RevocationRegistryDefinitionValue {
        return try! FfiConverterTypeRevocationRegistryDefinitionValue.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinition_get_value(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_revocationregistrydefinition_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeRevocationRegistryDefinition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinition

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDefinition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinition {
        return RevocationRegistryDefinition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDefinition) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeRevocationRegistryDefinition_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinition {
    return try FfiConverterTypeRevocationRegistryDefinition.lift(pointer)
}

public func FfiConverterTypeRevocationRegistryDefinition_lower(_ value: RevocationRegistryDefinition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDefinition.lower(value)
}

public protocol RevocationRegistryDefinitionPrivateProtocol {
    func getJson() throws -> String
}

public class RevocationRegistryDefinitionPrivate: RevocationRegistryDefinitionPrivateProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_revocationregistrydefinitionprivate_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_revocationregistrydefinitionprivate(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_revocationregistrydefinitionprivate_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeRevocationRegistryDefinitionPrivate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionPrivate

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinitionPrivate {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDefinitionPrivate, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionPrivate {
        return RevocationRegistryDefinitionPrivate(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDefinitionPrivate) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeRevocationRegistryDefinitionPrivate_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionPrivate {
    return try FfiConverterTypeRevocationRegistryDefinitionPrivate.lift(pointer)
}

public func FfiConverterTypeRevocationRegistryDefinitionPrivate_lower(_ value: RevocationRegistryDefinitionPrivate) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDefinitionPrivate.lower(value)
}

public protocol RevocationRegistryDefinitionValueProtocol {
    func getMaxCredNum() -> UInt32
    func getTailsHash() -> String
    func getTailsLocation() -> String
    func getJson() throws -> String
}

public class RevocationRegistryDefinitionValue: RevocationRegistryDefinitionValueProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_revocationregistrydefinitionvalue_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_revocationregistrydefinitionvalue(pointer, $0) }
    }

    public func getMaxCredNum() -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_max_cred_num(self.pointer, $0)
                }
        )
    }

    public func getTailsHash() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_tails_hash(self.pointer, $0)
                }
        )
    }

    public func getTailsLocation() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_tails_location(self.pointer, $0)
                }
        )
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_revocationregistrydefinitionvalue_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeRevocationRegistryDefinitionValue: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionValue

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinitionValue {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDefinitionValue, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionValue {
        return RevocationRegistryDefinitionValue(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDefinitionValue) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeRevocationRegistryDefinitionValue_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionValue {
    return try FfiConverterTypeRevocationRegistryDefinitionValue.lift(pointer)
}

public func FfiConverterTypeRevocationRegistryDefinitionValue_lower(_ value: RevocationRegistryDefinitionValue) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDefinitionValue.lower(value)
}

public protocol RevocationRegistryDefinitionValuePublicKeysProtocol {
    func getJson() throws -> String
}

public class RevocationRegistryDefinitionValuePublicKeys: RevocationRegistryDefinitionValuePublicKeysProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_revocationregistrydefinitionvaluepublickeys_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_revocationregistrydefinitionvaluepublickeys(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_revocationregistrydefinitionvaluepublickeys_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationRegistryDefinitionValuePublicKeys

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinitionValuePublicKeys {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationRegistryDefinitionValuePublicKeys, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionValuePublicKeys {
        return RevocationRegistryDefinitionValuePublicKeys(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationRegistryDefinitionValuePublicKeys) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationRegistryDefinitionValuePublicKeys {
    return try FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys.lift(pointer)
}

public func FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys_lower(_ value: RevocationRegistryDefinitionValuePublicKeys) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationRegistryDefinitionValuePublicKeys.lower(value)
}

public protocol RevocationStatusListProtocol {
    func getJson() throws -> String
}

public class RevocationStatusList: RevocationStatusListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(jsonString: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
            uniffi_anoncreds_fn_constructor_revocationstatuslist_new(
                FfiConverterString.lower(jsonString), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_anoncreds_fn_free_revocationstatuslist(pointer, $0) }
    }

    public func getJson() throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeAnoncredsError.lift) {
                uniffi_anoncreds_fn_method_revocationstatuslist_get_json(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeRevocationStatusList: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RevocationStatusList

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationStatusList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RevocationStatusList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationStatusList {
        return RevocationStatusList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RevocationStatusList) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeRevocationStatusList_lift(_ pointer: UnsafeMutableRawPointer) throws -> RevocationStatusList {
    return try FfiConverterTypeRevocationStatusList.lift(pointer)
}

public func FfiConverterTypeRevocationStatusList_lower(_ value: RevocationStatusList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRevocationStatusList.lower(value)
}

public struct AttributeValues {
    public var raw: String
    public var encoded: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(raw: String, encoded: String) {
        self.raw = raw
        self.encoded = encoded
    }
}

extension AttributeValues: Equatable, Hashable {
    public static func == (lhs: AttributeValues, rhs: AttributeValues) -> Bool {
        if lhs.raw != rhs.raw {
            return false
        }
        if lhs.encoded != rhs.encoded {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(raw)
        hasher.combine(encoded)
    }
}

public struct FfiConverterTypeAttributeValues: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AttributeValues {
        return try AttributeValues(
            raw: FfiConverterString.read(from: &buf),
            encoded: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AttributeValues, into buf: inout [UInt8]) {
        FfiConverterString.write(value.raw, into: &buf)
        FfiConverterString.write(value.encoded, into: &buf)
    }
}

public func FfiConverterTypeAttributeValues_lift(_ buf: RustBuffer) throws -> AttributeValues {
    return try FfiConverterTypeAttributeValues.lift(buf)
}

public func FfiConverterTypeAttributeValues_lower(_ value: AttributeValues) -> RustBuffer {
    return FfiConverterTypeAttributeValues.lower(value)
}

public struct CreateCrendentialRequestResponse {
    public var request: CredentialRequest
    public var metadata: CredentialRequestMetadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(request: CredentialRequest, metadata: CredentialRequestMetadata) {
        self.request = request
        self.metadata = metadata
    }
}

public struct FfiConverterTypeCreateCrendentialRequestResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CreateCrendentialRequestResponse {
        return try CreateCrendentialRequestResponse(
            request: FfiConverterTypeCredentialRequest.read(from: &buf),
            metadata: FfiConverterTypeCredentialRequestMetadata.read(from: &buf)
        )
    }

    public static func write(_ value: CreateCrendentialRequestResponse, into buf: inout [UInt8]) {
        FfiConverterTypeCredentialRequest.write(value.request, into: &buf)
        FfiConverterTypeCredentialRequestMetadata.write(value.metadata, into: &buf)
    }
}

public func FfiConverterTypeCreateCrendentialRequestResponse_lift(_ buf: RustBuffer) throws -> CreateCrendentialRequestResponse {
    return try FfiConverterTypeCreateCrendentialRequestResponse.lift(buf)
}

public func FfiConverterTypeCreateCrendentialRequestResponse_lower(_ value: CreateCrendentialRequestResponse) -> RustBuffer {
    return FfiConverterTypeCreateCrendentialRequestResponse.lower(value)
}

public struct CredentialDefinitionConfig {
    public var supportRevocation: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(supportRevocation: Bool) {
        self.supportRevocation = supportRevocation
    }
}

extension CredentialDefinitionConfig: Equatable, Hashable {
    public static func == (lhs: CredentialDefinitionConfig, rhs: CredentialDefinitionConfig) -> Bool {
        if lhs.supportRevocation != rhs.supportRevocation {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(supportRevocation)
    }
}

public struct FfiConverterTypeCredentialDefinitionConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinitionConfig {
        return try CredentialDefinitionConfig(
            supportRevocation: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: CredentialDefinitionConfig, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.supportRevocation, into: &buf)
    }
}

public func FfiConverterTypeCredentialDefinitionConfig_lift(_ buf: RustBuffer) throws -> CredentialDefinitionConfig {
    return try FfiConverterTypeCredentialDefinitionConfig.lift(buf)
}

public func FfiConverterTypeCredentialDefinitionConfig_lower(_ value: CredentialDefinitionConfig) -> RustBuffer {
    return FfiConverterTypeCredentialDefinitionConfig.lower(value)
}

public struct CredentialDefinitionData {
    public var primary: String
    public var revocation: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(primary: String, revocation: String?) {
        self.primary = primary
        self.revocation = revocation
    }
}

extension CredentialDefinitionData: Equatable, Hashable {
    public static func == (lhs: CredentialDefinitionData, rhs: CredentialDefinitionData) -> Bool {
        if lhs.primary != rhs.primary {
            return false
        }
        if lhs.revocation != rhs.revocation {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(primary)
        hasher.combine(revocation)
    }
}

public struct FfiConverterTypeCredentialDefinitionData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinitionData {
        return try CredentialDefinitionData(
            primary: FfiConverterString.read(from: &buf),
            revocation: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: CredentialDefinitionData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.primary, into: &buf)
        FfiConverterOptionString.write(value.revocation, into: &buf)
    }
}

public func FfiConverterTypeCredentialDefinitionData_lift(_ buf: RustBuffer) throws -> CredentialDefinitionData {
    return try FfiConverterTypeCredentialDefinitionData.lift(buf)
}

public func FfiConverterTypeCredentialDefinitionData_lower(_ value: CredentialDefinitionData) -> RustBuffer {
    return FfiConverterTypeCredentialDefinitionData.lower(value)
}

public struct CredentialRequestMetadata {
    public var linkSecretBlindingData: String
    public var nonce: Nonce
    public var linkSecretName: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(linkSecretBlindingData: String, nonce: Nonce, linkSecretName: String) {
        self.linkSecretBlindingData = linkSecretBlindingData
        self.nonce = nonce
        self.linkSecretName = linkSecretName
    }
}

public struct FfiConverterTypeCredentialRequestMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRequestMetadata {
        return try CredentialRequestMetadata(
            linkSecretBlindingData: FfiConverterString.read(from: &buf),
            nonce: FfiConverterTypeNonce.read(from: &buf),
            linkSecretName: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CredentialRequestMetadata, into buf: inout [UInt8]) {
        FfiConverterString.write(value.linkSecretBlindingData, into: &buf)
        FfiConverterTypeNonce.write(value.nonce, into: &buf)
        FfiConverterString.write(value.linkSecretName, into: &buf)
    }
}

public func FfiConverterTypeCredentialRequestMetadata_lift(_ buf: RustBuffer) throws -> CredentialRequestMetadata {
    return try FfiConverterTypeCredentialRequestMetadata.lift(buf)
}

public func FfiConverterTypeCredentialRequestMetadata_lower(_ value: CredentialRequestMetadata) -> RustBuffer {
    return FfiConverterTypeCredentialRequestMetadata.lower(value)
}

public struct CredentialRevocationConfig {
    public var regDef: RevocationRegistryDefinition
    public var regDefPrivate: RevocationRegistryDefinitionPrivate
    public var registryIdx: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(regDef: RevocationRegistryDefinition, regDefPrivate: RevocationRegistryDefinitionPrivate, registryIdx: UInt32) {
        self.regDef = regDef
        self.regDefPrivate = regDefPrivate
        self.registryIdx = registryIdx
    }
}

public struct FfiConverterTypeCredentialRevocationConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialRevocationConfig {
        return try CredentialRevocationConfig(
            regDef: FfiConverterTypeRevocationRegistryDefinition.read(from: &buf),
            regDefPrivate: FfiConverterTypeRevocationRegistryDefinitionPrivate.read(from: &buf),
            registryIdx: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: CredentialRevocationConfig, into buf: inout [UInt8]) {
        FfiConverterTypeRevocationRegistryDefinition.write(value.regDef, into: &buf)
        FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.regDefPrivate, into: &buf)
        FfiConverterUInt32.write(value.registryIdx, into: &buf)
    }
}

public func FfiConverterTypeCredentialRevocationConfig_lift(_ buf: RustBuffer) throws -> CredentialRevocationConfig {
    return try FfiConverterTypeCredentialRevocationConfig.lift(buf)
}

public func FfiConverterTypeCredentialRevocationConfig_lower(_ value: CredentialRevocationConfig) -> RustBuffer {
    return FfiConverterTypeCredentialRevocationConfig.lower(value)
}

public struct CredentialValues {
    public var values: [String: AttributeValues]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(values: [String: AttributeValues]) {
        self.values = values
    }
}

extension CredentialValues: Equatable, Hashable {
    public static func == (lhs: CredentialValues, rhs: CredentialValues) -> Bool {
        if lhs.values != rhs.values {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(values)
    }
}

public struct FfiConverterTypeCredentialValues: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialValues {
        return try CredentialValues(
            values: FfiConverterDictionaryStringTypeAttributeValues.read(from: &buf)
        )
    }

    public static func write(_ value: CredentialValues, into buf: inout [UInt8]) {
        FfiConverterDictionaryStringTypeAttributeValues.write(value.values, into: &buf)
    }
}

public func FfiConverterTypeCredentialValues_lift(_ buf: RustBuffer) throws -> CredentialValues {
    return try FfiConverterTypeCredentialValues.lift(buf)
}

public func FfiConverterTypeCredentialValues_lower(_ value: CredentialValues) -> RustBuffer {
    return FfiConverterTypeCredentialValues.lower(value)
}

public struct IssuerCreateCredentialDefinitionReturn {
    public var credentialDefinition: CredentialDefinition
    public var credentialDefinitionPrivate: CredentialDefinitionPrivate
    public var credentialKeyCorrectnessProof: CredentialKeyCorrectnessProof

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credentialDefinition: CredentialDefinition, credentialDefinitionPrivate: CredentialDefinitionPrivate, credentialKeyCorrectnessProof: CredentialKeyCorrectnessProof) {
        self.credentialDefinition = credentialDefinition
        self.credentialDefinitionPrivate = credentialDefinitionPrivate
        self.credentialKeyCorrectnessProof = credentialKeyCorrectnessProof
    }
}

public struct FfiConverterTypeIssuerCreateCredentialDefinitionReturn: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IssuerCreateCredentialDefinitionReturn {
        return try IssuerCreateCredentialDefinitionReturn(
            credentialDefinition: FfiConverterTypeCredentialDefinition.read(from: &buf),
            credentialDefinitionPrivate: FfiConverterTypeCredentialDefinitionPrivate.read(from: &buf),
            credentialKeyCorrectnessProof: FfiConverterTypeCredentialKeyCorrectnessProof.read(from: &buf)
        )
    }

    public static func write(_ value: IssuerCreateCredentialDefinitionReturn, into buf: inout [UInt8]) {
        FfiConverterTypeCredentialDefinition.write(value.credentialDefinition, into: &buf)
        FfiConverterTypeCredentialDefinitionPrivate.write(value.credentialDefinitionPrivate, into: &buf)
        FfiConverterTypeCredentialKeyCorrectnessProof.write(value.credentialKeyCorrectnessProof, into: &buf)
    }
}

public func FfiConverterTypeIssuerCreateCredentialDefinitionReturn_lift(_ buf: RustBuffer) throws -> IssuerCreateCredentialDefinitionReturn {
    return try FfiConverterTypeIssuerCreateCredentialDefinitionReturn.lift(buf)
}

public func FfiConverterTypeIssuerCreateCredentialDefinitionReturn_lower(_ value: IssuerCreateCredentialDefinitionReturn) -> RustBuffer {
    return FfiConverterTypeIssuerCreateCredentialDefinitionReturn.lower(value)
}

public struct IssuerCreateRevocationRegistryDefReturn {
    public var regDef: RevocationRegistryDefinition
    public var regDefPrivate: RevocationRegistryDefinitionPrivate

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(regDef: RevocationRegistryDefinition, regDefPrivate: RevocationRegistryDefinitionPrivate) {
        self.regDef = regDef
        self.regDefPrivate = regDefPrivate
    }
}

public struct FfiConverterTypeIssuerCreateRevocationRegistryDefReturn: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IssuerCreateRevocationRegistryDefReturn {
        return try IssuerCreateRevocationRegistryDefReturn(
            regDef: FfiConverterTypeRevocationRegistryDefinition.read(from: &buf),
            regDefPrivate: FfiConverterTypeRevocationRegistryDefinitionPrivate.read(from: &buf)
        )
    }

    public static func write(_ value: IssuerCreateRevocationRegistryDefReturn, into buf: inout [UInt8]) {
        FfiConverterTypeRevocationRegistryDefinition.write(value.regDef, into: &buf)
        FfiConverterTypeRevocationRegistryDefinitionPrivate.write(value.regDefPrivate, into: &buf)
    }
}

public func FfiConverterTypeIssuerCreateRevocationRegistryDefReturn_lift(_ buf: RustBuffer) throws -> IssuerCreateRevocationRegistryDefReturn {
    return try FfiConverterTypeIssuerCreateRevocationRegistryDefReturn.lift(buf)
}

public func FfiConverterTypeIssuerCreateRevocationRegistryDefReturn_lower(_ value: IssuerCreateRevocationRegistryDefReturn) -> RustBuffer {
    return FfiConverterTypeIssuerCreateRevocationRegistryDefReturn.lower(value)
}

public struct Schema {
    public var name: String
    public var version: String
    public var attrNames: AttributeNames
    public var issuerId: IssuerId

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, version: String, attrNames: AttributeNames, issuerId: IssuerId) {
        self.name = name
        self.version = version
        self.attrNames = attrNames
        self.issuerId = issuerId
    }
}

extension Schema: Equatable, Hashable {
    public static func == (lhs: Schema, rhs: Schema) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.attrNames != rhs.attrNames {
            return false
        }
        if lhs.issuerId != rhs.issuerId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(version)
        hasher.combine(attrNames)
        hasher.combine(issuerId)
    }
}

public struct FfiConverterTypeSchema: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Schema {
        return try Schema(
            name: FfiConverterString.read(from: &buf),
            version: FfiConverterString.read(from: &buf),
            attrNames: FfiConverterTypeAttributeNames.read(from: &buf),
            issuerId: FfiConverterTypeIssuerId.read(from: &buf)
        )
    }

    public static func write(_ value: Schema, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.version, into: &buf)
        FfiConverterTypeAttributeNames.write(value.attrNames, into: &buf)
        FfiConverterTypeIssuerId.write(value.issuerId, into: &buf)
    }
}

public func FfiConverterTypeSchema_lift(_ buf: RustBuffer) throws -> Schema {
    return try FfiConverterTypeSchema.lift(buf)
}

public func FfiConverterTypeSchema_lower(_ value: Schema) -> RustBuffer {
    return FfiConverterTypeSchema.lower(value)
}

public enum AnoncredsError {
    // Simple error enums only carry a message
    case ConversionError(message: String)

    // Simple error enums only carry a message
    case SomethingWentWrong(message: String)

    // Simple error enums only carry a message
    case CreateCrentialRequestError(message: String)

    // Simple error enums only carry a message
    case CreateSchemaError(message: String)

    // Simple error enums only carry a message
    case CreateCredentialDefinition(message: String)

    // Simple error enums only carry a message
    case CreateRevocationRegistryDef(message: String)

    // Simple error enums only carry a message
    case CreateRevocationStatusList(message: String)

    // Simple error enums only carry a message
    case UpdateRevocationStatusList(message: String)

    // Simple error enums only carry a message
    case CreateCredentialOffer(message: String)

    // Simple error enums only carry a message
    case CreateCredential(message: String)

    // Simple error enums only carry a message
    case ProcessCredential(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeAnoncredsError.lift(error)
    }
}

public struct FfiConverterTypeAnoncredsError: FfiConverterRustBuffer {
    typealias SwiftType = AnoncredsError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AnoncredsError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .ConversionError(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .SomethingWentWrong(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .CreateCrentialRequestError(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .CreateSchemaError(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .CreateCredentialDefinition(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .CreateRevocationRegistryDef(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .CreateRevocationStatusList(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .UpdateRevocationStatusList(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .CreateCredentialOffer(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .CreateCredential(
                message: FfiConverterString.read(from: &buf)
            )

        case 11: return try .ProcessCredential(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AnoncredsError, into buf: inout [UInt8]) {
        switch value {
        case let .ConversionError(message):
            writeInt(&buf, Int32(1))
        case let .SomethingWentWrong(message):
            writeInt(&buf, Int32(2))
        case let .CreateCrentialRequestError(message):
            writeInt(&buf, Int32(3))
        case let .CreateSchemaError(message):
            writeInt(&buf, Int32(4))
        case let .CreateCredentialDefinition(message):
            writeInt(&buf, Int32(5))
        case let .CreateRevocationRegistryDef(message):
            writeInt(&buf, Int32(6))
        case let .CreateRevocationStatusList(message):
            writeInt(&buf, Int32(7))
        case let .UpdateRevocationStatusList(message):
            writeInt(&buf, Int32(8))
        case let .CreateCredentialOffer(message):
            writeInt(&buf, Int32(9))
        case let .CreateCredential(message):
            writeInt(&buf, Int32(10))
        case let .ProcessCredential(message):
            writeInt(&buf, Int32(11))
        }
    }
}

extension AnoncredsError: Equatable, Hashable {}

extension AnoncredsError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RegistryType {
    case clAccum
}

public struct FfiConverterTypeRegistryType: FfiConverterRustBuffer {
    typealias SwiftType = RegistryType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RegistryType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .clAccum

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RegistryType, into buf: inout [UInt8]) {
        switch value {
        case .clAccum:
            writeInt(&buf, Int32(1))
        }
    }
}

public func FfiConverterTypeRegistryType_lift(_ buf: RustBuffer) throws -> RegistryType {
    return try FfiConverterTypeRegistryType.lift(buf)
}

public func FfiConverterTypeRegistryType_lower(_ value: RegistryType) -> RustBuffer {
    return FfiConverterTypeRegistryType.lower(value)
}

extension RegistryType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SignatureType {
    case cl
}

public struct FfiConverterTypeSignatureType: FfiConverterRustBuffer {
    typealias SwiftType = SignatureType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .cl

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignatureType, into buf: inout [UInt8]) {
        switch value {
        case .cl:
            writeInt(&buf, Int32(1))
        }
    }
}

public func FfiConverterTypeSignatureType_lift(_ buf: RustBuffer) throws -> SignatureType {
    return try FfiConverterTypeSignatureType.lift(buf)
}

public func FfiConverterTypeSignatureType_lower(_ value: SignatureType) -> RustBuffer {
    return FfiConverterTypeSignatureType.lower(value)
}

extension SignatureType: Equatable, Hashable {}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRevocationRegistryDefinition: FfiConverterRustBuffer {
    typealias SwiftType = RevocationRegistryDefinition?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevocationRegistryDefinition.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationRegistryDefinition.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRevocationStatusList: FfiConverterRustBuffer {
    typealias SwiftType = RevocationStatusList?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevocationStatusList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationStatusList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeCredentialRevocationConfig: FfiConverterRustBuffer {
    typealias SwiftType = CredentialRevocationConfig?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCredentialRevocationConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCredentialRevocationConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRevocationRegistryId: FfiConverterRustBuffer {
    typealias SwiftType = RevocationRegistryId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevocationRegistryId.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevocationRegistryId.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]

    public static func write(_ value: [UInt32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt32] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt32.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAttributeValues: FfiConverterRustBuffer {
    typealias SwiftType = [AttributeValues]

    public static func write(_ value: [AttributeValues], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAttributeValues.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AttributeValues] {
        let len: Int32 = try readInt(&buf)
        var seq = [AttributeValues]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeAttributeValues.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringTypeAttributeValues: FfiConverterRustBuffer {
    public static func write(_ value: [String: AttributeValues], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeAttributeValues.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: AttributeValues] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: AttributeValues]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeAttributeValues.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AttributeNames = [String]
public struct FfiConverterTypeAttributeNames: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AttributeNames {
        return try FfiConverterSequenceString.read(from: &buf)
    }

    public static func write(_ value: AttributeNames, into buf: inout [UInt8]) {
        return FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AttributeNames {
        return try FfiConverterSequenceString.lift(value)
    }

    public static func lower(_ value: AttributeNames) -> RustBuffer {
        return FfiConverterSequenceString.lower(value)
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias CredentialDefinitionId = String
public struct FfiConverterTypeCredentialDefinitionId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialDefinitionId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: CredentialDefinitionId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> CredentialDefinitionId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: CredentialDefinitionId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias IssuerId = String
public struct FfiConverterTypeIssuerId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IssuerId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: IssuerId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> IssuerId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: IssuerId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RevocationRegistryDefinitionId = String
public struct FfiConverterTypeRevocationRegistryDefinitionId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryDefinitionId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: RevocationRegistryDefinitionId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> RevocationRegistryDefinitionId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: RevocationRegistryDefinitionId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias RevocationRegistryId = String
public struct FfiConverterTypeRevocationRegistryId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevocationRegistryId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: RevocationRegistryId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> RevocationRegistryId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: RevocationRegistryId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SchemaId = String
public struct FfiConverterTypeSchemaId: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SchemaId {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: SchemaId, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> SchemaId {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: SchemaId) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_anoncreds_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi__checksum_method_linksecret_get_big_number() != 17566 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_linksecret_get_value() != 31184 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_nonce_get_value() != 55559 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialdefinition_get_schema_id() != 2873 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialdefinition_get_signature_type() != 33283 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialdefinition_get_tag() != 64489 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialdefinition_get_issuer_id() != 19453 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialdefinition_get_json() != 13633 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialoffer_get_schema_id() != 9785 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialoffer_get_cred_def_id() != 54789 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialoffer_get_key_correctness_proof() != 4524 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialoffer_get_nonce() != 8992 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialoffer_get_method_name() != 10089 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialoffer_get_json() != 21450 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialrequest_get_blinded_credential_secrets_json() != 28369 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialrequest_get_blinded_credential_secrets_correctness_proof_json() != 6360 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialrequest_get_nonce() != 29424 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialrequest_get_json() != 26067 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialkeycorrectnessproof_get_json() != 28526 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinition_get_issuer_id() != 55636 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinition_get_tag() != 9407 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinition_get_cred_def_id() != 18370 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinition_get_value() != 54233 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinition_get_json() != 30273 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinitionprivate_get_json() != 49890 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_schema_id() != 5900 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_cred_def_id() != 17534 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_rev_reg_id() != 62977 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_values() != 54784 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_signature_json() != 23915 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_signature_correctness_proof_json() != 52780 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_rev_reg_json() != 55518 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_witness_json() != 40173 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credential_get_json() != 19925 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationstatuslist_get_json() != 26059 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinitionvalue_get_max_cred_num() != 22553 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinitionvalue_get_tails_hash() != 52751 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinitionvalue_get_tails_location() != 10552 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinitionvalue_get_json() != 27094 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_revocationregistrydefinitionvaluepublickeys_get_json() != 2321 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_credentialdefinitionprivate_get_json() != 8321 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_create_schema() != 16570 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_create_credential_definition() != 13296 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_create_revocation_registry_def() != 29924 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_create_revocation_status_list() != 18299 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_update_revocation_status_list_timestamp_only() != 37725 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_update_revocation_status_list() != 64292 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_create_credential_offer() != 26660 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_issuer_create_credential() != 5649 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_prover_create_credential_request() != 26116 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_prover_process_credential() != 64866 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_method_prover_create_link_secret() != 11469 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_linksecret_new() != 27344 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_linksecret_new_from_value() != 34527 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_nonce_new() != 62144 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_nonce_new_from_value() != 17009 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_credentialdefinition_new() != 21273 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_credentialoffer_new() != 61941 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_credentialrequest_new() != 16217 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_credentialkeycorrectnessproof_new() != 30790 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_revocationregistrydefinition_new() != 35203 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_revocationregistrydefinitionprivate_new() != 17035 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_credential_new() != 21829 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_revocationstatuslist_new() != 41592 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_revocationregistrydefinitionvalue_new() != 15419 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_revocationregistrydefinitionvaluepublickeys_new() != 46152 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_credentialdefinitionprivate_new() != 27360 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_issuer_new() != 52382 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi__checksum_constructor_prover_new() != 45439 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
