[Error]
enum AnoncredsError {
  "ConversionError",
  "SomethingWentWrong", 
  "CreateCrentialRequestError",
};

enum SignatureType {
    "CL",
};

dictionary SchemaID {
    string id;
};

dictionary IssuerID {
    string id;
};

dictionary CredentialDefinitionID {
    string id;
};

interface LinkSecret {
    constructor();
    string get_big_number();
};

interface Nonce {
    constructor();
};

dictionary CredentialDefinitionData {
    string primary;
    string? revocation;
};

interface CredentialDefinition {
    [Throws=AnoncredsError]
    constructor(string json_string);
    SchemaID get_schema_id();
    SignatureType get_signature_type();
    string get_tag();
    CredentialDefinitionData get_value();
    IssuerID get_issuer_id();
};

interface CredentialOffer {
    [Throws=AnoncredsError]
    constructor(string json_string);
    SchemaID get_schema_id();
    CredentialDefinitionID get_cred_def_id();
    string get_key_correctness_proof();
    Nonce get_nonce();
    string? get_method_name();
};

interface CredentialRequest {
    string get_blinded_credential_secrets_json();
    string get_blinded_credential_secrets_correctness_proof_json();
    Nonce get_nonce();
    string get_json();
};

dictionary CredentialRequestMetadata {
    string link_secret_blinding_data;
    Nonce nonce;
    string link_secret_name;
};

dictionary CreateCrendentialRequestResponse {
    CredentialRequest request;
    CredentialRequestMetadata metadata;
};

interface Prover {
  constructor();

  [Throws=AnoncredsError]
  CreateCrendentialRequestResponse create_credential_request(
    [ByRef] string entropy,
    [ByRef] string prover_did,
    [ByRef] CredentialDefinition cred_def,
    [ByRef] LinkSecret link_secret,
    [ByRef] string link_secret_id,
    [ByRef] CredentialOffer credential_offer
  );

  LinkSecret create_link_secret();
};

namespace anoncreds {};